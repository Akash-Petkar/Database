java.io.IOException: Cannot run program "C:\Users\petkaak\AppData\Local\Temp\sftp-script6172062507753648171.sh": CreateProcess error=193, %1 is not a valid Win32 application
	at java.lang.ProcessBuilder.start(ProcessBuilder.java:1048)
	at com.verizon.connect.svcinv.business.dataservice.config.SftpFileTransfer.sendFileViaSFTP(SftpFileTransfer.java:61)
	at com.verizon.connect.svcinv.business.dataservice.config.SftpFileTransfer.transferFileToServer(SftpFileTransfer.java:23)
	at com.verizon.connect.svcinv.business.dataservice.services.TnInventoryReportServiceImpl.getTnInvReport(TnInventoryReportServiceImpl.java:111)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.interceptor.AsyncExecutionInterceptor.lambda$invoke$0(AsyncExecutionInterceptor.java:115)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)
Caused by: java.io.IOException: CreateProcess error=193, %1 is not a valid Win32 application
	at java.lang.ProcessImpl.create(Native Method)
	at java.lang.ProcessImpl.<init>(ProcessImpl.java:453)
	at java.lang.ProcessImpl.start(ProcessImpl.java:139)
	at java.lang.ProcessBuilder.start(ProcessBuilder.java:1029)
==========================================
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

public class SftpFileTransfer {

    public static void main(String[] args) {
        // SFTP credentials and file information
        String username = "cssopfeed";
        String host = "abrdmdcspfs1q1v.vzbi.com";
        int port = 22;
        String password = "your_password";  // Your password here
        String remotePath = "/home/cssopfeed/esaptnreports/inbound/";
        String localFilePath = "src/main/resources/myfile.csv";

        try {
            sendFileViaSFTP(username, password, host, port, remotePath, localFilePath);
        } catch (IOException | InterruptedException e) {
            e.printStackTrace();
        }
    }

    public static void sendFileViaSFTP(String username, String password, String host, int port, 
                                       String remotePath, String localFilePath)
            throws IOException, InterruptedException {

        // Create the Expect script for automating password entry
        String expectScript = 
            "#!/usr/bin/expect -f\n" +
            "set timeout -1\n" +
            "spawn sftp -o StrictHostKeyChecking=no -P " + port + " " + username + "@" + host + "\n" +
            "expect \"password:\"\n" +
            "send \"" + password + "\\r\"\n" +
            "expect \"sftp>\"\n" +
            "send \"put " + localFilePath + " " + remotePath + "\\r\"\n" +
            "expect \"sftp>\"\n" +
            "send \"exit\\r\"\n" +
            "expect eof\n";

        // Write the Expect script to a temporary file
        File tempScriptFile = File.createTempFile("sftp-script", ".sh");
        try (var writer = new java.io.FileWriter(tempScriptFile)) {
            writer.write(expectScript);
        }

        // Ensure the script is executable
        tempScriptFile.setExecutable(true);

        // Execute the Expect script using ProcessBuilder
        List<String> command = new ArrayList<>();
        command.add(tempScriptFile.getAbsolutePath());

        ProcessBuilder pb = new ProcessBuilder(command);
        pb.redirectErrorStream(true);

        Process process = pb.start();

        // Wait for the process to complete
        int exitCode = process.waitFor();
        if (exitCode == 0) {
            System.out.println("File transferred successfully to the server.");
        } else {
            System.err.println("File transfer failed.");
        }

        // Clean up the temporary script file
        tempScriptFile.delete();
    }
}
=====================================
@Override
	public ResponseEntity<Object> writeFilesToRemoteFilePath(
			@ApiParam(value = "Business details", required = true) @Valid @RequestBody FileHandlerRequest fileHandlerRequest) throws AppException, IntfFileHandlerException {
		logger.info("begin writeFilesToRemoteFilePath");
		FileHandlerResponse fileHandlerResponse = fileHandlerBusinessService.writeFilesToRemoteFilePath(fileHandlerRequest);
		logger.info("end writeFilesToRemoteFilePath {}", InfrastructureCommonUtil.convertToJSON(fileHandlerResponse));
		return new ResponseEntity<>(fileHandlerResponse,HttpStatus.OK);
	}

=============================================================================
@Override
	public FileHandlerResponse writeFilesToRemoteFilePath(FileHandlerRequest fileHandlerRequest)
			throws AppException, IntfFileHandlerException {
		logger.info("begin writeFilesToRemoteFilePath");
		FileHandlerResponse fileHandlerResponse = new FileHandlerResponse();
		ResponseDetails responseDetails = null;

		String envStatusProfile = String.valueOf(executionContext.get(ENV_STATUS_PROFILE));
		logger.info("envStatusProfile ::::::::::::; {} ", envStatusProfile);
		String allowStatusFlag = String.valueOf(batchLoadPathMap.get(envStatusProfile).getEnvStatusFlag());
		logger.info("allowStatusFlag ::::::::::::; {} ", allowStatusFlag);
		
		if (ALLOW_STATUS_FLAG.equalsIgnoreCase(allowStatusFlag)) {
			writeRemoteFileHandler.filesTransferFromLocalToRemote(
					String.valueOf(fileHandlerRequest.getFileParams().get(KEY)), fileHandlerRequest.getCurrentMdc(),
					Boolean.valueOf(String.valueOf(fileHandlerRequest.getFileParams().get(IS_FILES_TO_BE_LISTED))),
					Boolean.valueOf(String.valueOf(fileHandlerRequest.getFileParams().get(POLLING_ON_BACKUP_FILES))));

			responseDetails = setResponseDetails("Initiated to write files to remote FilePath");
		} else {
			responseDetails = setResponseDetails("Current profile is not active to process further");
		}
		fileHandlerResponse.setResponseDetails(responseDetails);

		logger.info("end writeFilesToRemoteFilePath");
		return fileHandlerResponse;
	}

===============================================================================================
@Async("orderScheduleExec")
	@TrackResponseTime(method = Method.SERVICE)
	public void filesTransferFromLocalToRemote(String key, Map<String, String> currentMdc, boolean isFilesToBeListed,
			boolean pollingOnBackUp) throws IntfFileHandlerException {
		boolean isFilesListed = false;
		boolean isTmpDirCreated = false;
		
		logger.info("file transfer from Local K8s to remote server :: Execution Time - {} :::: key {}",
				dateTimeFormatter.format(LocalDateTime.now()), key);

		MDC.setContextMap(currentMdc);

		if (!StringUtils.isEmpty(batchLoadPathMap.get(key))) {

			// create tmp feed directory
			String scptempFeeddir = batchLoadPathMap.get(key).getK8sTmpFilePath();
			isTmpDirCreated = interfaceFileHandlerUtil.createFeedDirectory(scptempFeeddir);
			isTmpDirCreated(isTmpDirCreated);
		
			String fileName = retrieveFileName(pollingOnBackUp, key);
			if (StringUtils.isEmpty(fileName)) {
				logger.info("No files to read in K8s/Backup file paths :::::::::  ");
				return;
			}

			if (isFilesToBeListed) {
				logger.info("list the files on remote server  :::::::: key {} ", key);
				isFilesListed = listFilesAtRemoteServer(key);
				setAuditInfo(key, fileName, LISTED_REMOTE_SERVER_SUCCESSFUL);
			}

			if (!isFilesListed && !pollingOnBackUp) {
				writeFileToRemoteServer(fileName, key);
			}

			if (!isFilesListed && pollingOnBackUp) {
				writeFileToRemoteServerFromBackup(fileName, key);
			}

		}

		logger.info("Remote file transfer Current Thread : {}", Thread.currentThread().getName());
	}

============================================================================
@TrackResponseTime(method = Method.SERVICE)
	private void writeFileToRemoteServer(String fileName, String key) throws IntfFileHandlerException {

		boolean isFileCopiedRemotely = false;
		boolean isFileCopiedToFileSys;

		if (!StringUtils.isEmpty(fileName)) {
			String extractedFileName= extractFileNameFromFilePath(fileName);
			logger.info("extractedFileName {} ::::::::::::::::: ", extractedFileName);
			
			String cpyFileSyscmd = MessageFormat.format(appConfig.getFileConfigs().getScpWriteRemoteFileCommand(),
					fileName, batchLoadPathMap.get(key).getBackUpRemoteUser(),
					batchLoadPathMap.get(key).getBackUpRemoteHost(),
					batchLoadPathMap.get(key).getBackUpRemoteFileWritePath());

			isFileCopiedToFileSys = copyToRemoteFolder(cpyFileSyscmd);
			setAuditInfo(key, extractedFileName, cpyFileSyscmd.concat(COPIED_FILES_BACKUP_SERVER_SUCCESSFUL));
			if (!isFileCopiedToFileSys) {
				logger.info("Error in executing scp command or error in writing file to back up remote server");

			}

			String cpyRmtcmd = MessageFormat.format(appConfig.getFileConfigs().getScpWriteRemoteFileCommand(), fileName,
					batchLoadPathMap.get(key).getRemoteUser(), batchLoadPathMap.get(key).getRemoteHost(),
					batchLoadPathMap.get(key).getRemoteFileWritePath());
			isFileCopiedRemotely = copyToRemoteFolder(cpyRmtcmd);
			setAuditInfo(key, extractedFileName, COPIED_FILE_REMOTE_PATH_SUCCESSFUL.concat(cpyRmtcmd));
			if (!isFileCopiedRemotely) {
				logger.info("Error in executing scp command or error in writing file to remote server");
			} else {

				logger.info(
						"File successfully copied to remote server, proceed to delete the file from K8s  :::::::: key {} ",
						key);
				try {
					Thread.sleep(appConfig.getFileConfigs().getWriteSleepTime());
				}catch(InterruptedException e){
					logger.error("InterruptedException exception {}", e);
					Thread.currentThread().interrupt();
				}
				deleteFile(fileName);
				setAuditInfo(key, extractedFileName, DELETED_FILE_K8S_SUCCESSFUL.concat(fileName));
			}}
	}
====================================================================================
@TrackResponseTime(method = Method.SERVICE)
	public boolean copyToRemoteFolder(String cpyRmtcmd) throws IntfFileHandlerException {
		boolean isFileCopied = false;
		logger.info("copyToRemoteFolder::begin");
		Instant startTime = Instant.now();
		try {

			logger.info("copyToRemoteFolder::cpyRmtcmd->{}", cpyRmtcmd);

		
			isFileCopied = interfaceFileHandlerUtil.executeCommand(cpyRmtcmd, false, CPY_FILES_REMOTE);
			logger.info("copyToRemoteFolder::isFileCopied {} ", isFileCopied);

		} catch (IntfFileHandlerException e) {
			logger.error("downloadRemoteFiles()::exception: {} and StackTrace:{}", e, e.getException());
			throw e;
		}
		Instant endTime = Instant.now();
		logger.info("copyToRemoteFolder::end::total time in millis->{}",
				Duration.between(startTime, endTime).toMillis());
		return isFileCopied;
	}
=================================================================================
public boolean executeCommand(String cmd, boolean result, String flow) throws IntfFileHandlerException {
		logger.info("::::::: executeCommand begin ::::::: flow {} cmd {} result {} ", flow, cmd, result);
		AtomicInteger counter = new AtomicInteger(0);
		boolean commandResult = false;
		while (checkRetryCount(counter, commandResult)) {
			String[] cmdArr = { "bash", "-c", cmd };
			int returnVal = cmdUtil.runCommand(cmdArr, false);
			commandResult = returnVal == 0 ? true : false;
			if (!result) {
				setThreadToSleep(flow);
			}
		}

		return commandResult;
	}
