
===========================================================================
SELECT * 
FROM ordng.t_entity_spec_mapping
WHERE entity_name = 'LOCATION' 
  AND order_type = 'CHANGE'
  AND service_type = 'IP_INTEGRATED_ACCESS_ET'
  AND source = 'CSSOP'
  AND flow = 'VRD-TSO'
  AND region = 'US'
  AND spec_code NOT IN (
    'WEB_LANGUAGE', 'NS_CLLI', 'LOCATION_ID', 'LOCATION_NAME', 'VOIP_SERVICE_TYPE', 
    'LOC_CITY', 'LOC_STATE', 'LOC_ZIP', 'LOC_COUNTRY', 'BS_AS_PROFILE', 
    'BS_NS_PROV_USER', 'BS_AS_ID', 'BS_AS_NAME', 'BS_AS_IP_ADDRESS', 'BS_CLLI', 
    'BS_NODENAME', 'NS_AS_PROFILE', 'ENTERPRISE_ID', 'SIP_DOMAIN', 'EXTENSION_LENGTH', 
    'LINE_PORT_LENGTH', 'HYBRID_SERVICE_TYPE', 'NPANXX', 'TIME_ZONE', 'VM_LANG', 
    'WEB_LANG', 'RPID', 'ACCESS_TYPE', 'UNSCREENED_ANI', 'SCREENED_TN', 
    'SUBAGENCY_HIER_CODE', 'LOC_CCL_IND', 'BILL_TYPE', 'CIRCUIT_ID', 
    'PRIVATE_NUM_LENGTH', 'TOTAL_PUBLIC_NUMBERS', 'MARKET_TYPE', 'VM_TYPE', 
    'BILLING_ACTIVATED', 'CALL_FWD_PLAN_NAME', 'ENTERPRISE_TRUNK_ID', 'LOR_FLAG', 
    'CLID_FIRST_NAME', 'CLID_LAST_NAME', 'NS_PROV_USER'
  );

============================================================================
WEB_LANGUAGE
WEB_LANGUAGE
NS_CLLI
LOCATION_ID
LOCATION_NAME
VOIP_SERVICE_TYPE
LOC_CITY
LOC_STATE
LOC_ZIP
LOC_COUNTRY
BS_AS_PROFILE
BS_NS_PROV_USER
BS_AS_ID
BS_AS_NAME
BS_AS_IP_ADDRESS
BS_CLLI
BS_NODENAME
NS_AS_PROFILE
ENTERPRISE_ID
LOCATION_ID
WEB_LANGUAGE
SIP_DOMAIN
EXTENSION_LENGTH
LINE_PORT_LENGTH
HYBRID_SERVICE_TYPE
NPANXX
TIME_ZONE
VM_LANG
WEB_LANG
RPID
ACCESS_TYPE
UNSCREENED_ANI
SCREENED_TN
SUBAGENCY_HIER_CODE
LOC_CCL_IND
BILL_TYPE
CIRCUIT_ID
CIRCUIT_ID
PRIVATE_NUM_LENGTH
TOTAL_PUBLIC_NUMBERS
MARKET_TYPE
VM_TYPE
BILLING_ACTIVATED
CALL_FWD_PLAN_NAME
ENTERPRISE_TRUNK_ID
LOR_FLAG
CLID_FIRST_NAME
ENTERPRISE_ID
CLID_LAST_NAME
NS_PROV_USER
=============================================================================
TN-IventoryReport
===================================================================
{
	"attributeValue": [
		{
			"specName": "ACTIVE_IND",
			"specValue": "ACTIVE"
		},
		{
			"specName": "PORTING_CODE",
			"specValue": "F7X204635T33"
		}
	]
}
==============================================================
select
	totaldata.*,
	svi.entity_name,
	(
	select
	MAX(case when (data.specName = 'LOCATION_TYPE') then specValue else null end)
	from
	(
	  select
	     obj1->>'specName' specName,
		 obj1->>'specValue' specValue
	  from
		svcinv.t_service_inventory svm,
		jsonb_array_elements(svm.entity_attributes->'entityAttributes') obj1
	  where 
	    svm.entity_id=svi.entity_id
	  ) as data) as location_type,
	case 
		when user_id is not null then
	    'PRIMARY'
		     else 'UNK'
		   end as type,
	case 
		when user_id is not null and subscriber_id <> '0' then 'SUBSCRIBER'
		     else 'UNK'
		   end as resourcetype
	from
		(
		select
		    row_number() over() as rn,
		    data.tn as tn,
		    data.location_id as location_id,
		    data.customer_id as customer_id,
		    data.tn_status as tn_status,
		    MAX(case when (data.specName = 'CALLING_LINE_ID_FIRST_NAME') then specValue else null end) as calling_line_id_first_name,
			MAX(case when (data.specName = 'CALLING_LINE_ID_LAST_NAME') then specValue else null end) as calling_line_id_last_name,
			MAX(case when (data.specName = 'USER_ID') then specValue else null end) as user_id,
			MAX(case when (data.specName = 'SUBSCRIBER_ID') then specValue else null end) as subscriber_id
		from
			(
			select distinct 
			    tsi.tn as tn,
			    tsi.location_id as location_id,
			    tsi.customer_id as customer_id,
			    tsi.tn_status as tn_status,
				obj->>'specName' specName,
				obj->>'specValue' specValue
			from
				 svcinv.v_tn_inventory tsi,
				jsonb_array_elements(tsi.tn_attributes->'attributeValue') obj
			where
				tsi.customer_id = '400304359'
		) as data
		group by
			tn,
		    location_id,
		    customer_id,
		   tn_status) as totaldata
		  left join svcinv.t_service_inventory svi
		    on totaldata.location_id = svi.entity_id
		    and 
		       svi.entity_type = 'LOCATION';
===================================================================
Junit Test Case
import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.springframework.http.ResponseEntity;
import org.springframework.boot.test.context.SpringBootTest;

import java.util.Collections;
import java.util.List;

@SpringBootTest
public class OrderServiceTest {

    @Mock
    private CssopApiConfig cssopApiConfig;

    @Mock
    private CamelServiceImpl camelServiceImpl;

    @InjectMocks
    private OrderService orderService;

    private TnInventoryReportRequest request;
    private ObjectMapper objectMapper;
    private JsonNode rootNode;
    private String columnValue;

    @BeforeEach
    public void setUp() throws Exception {
        request = new TnInventoryReportRequest();
        request.setLocationId(Collections.singletonList("locationIdValue"));
        request.setTransactionId("transactionIdValue");
        request.setSource("sourceValue");
        request.setEnterpriseId("enterpriseIdValue");
        request.setRequestId("requestIdValue");

        objectMapper = new ObjectMapper();

        // Sample JSON structure to mock the rootNode
        String json = "{ \"serviceOrder\": { \"serviceOrderHeader\": { \"flow\": \"flowValue\", " +
                      "\"supp\": true, \"suppField\": false, \"region\": \"regionValue\", " +
                      "\"product\": \"productValue\", \"orderType\": \"orderTypeValue\", " +
                      "\"serviceType\": \"serviceTypeValue\", \"functionCode\": \"functionCodeValue\", " +
                      "\"lineOfBusiness\": \"lineOfBusinessValue\", \"workOrderVersion\": \"1.0\", " +
                      "\"userContact\": { \"firstName\": \"John\", \"lastName\": \"Doe\" } }, " +
                      "\"services\": { \"commonSpecifications\": { \"specification\": [ { \"code\": \"EnterpriseId\", \"value\": \"enterpriseIdValue\" }, " +
                      "{ \"code\": \"API_NAME\", \"value\": \"APINameValue\" }, " +
                      "{ \"code\": \"locationId\", \"value\": \"locationIdValue\" }, " +
                      "{ \"code\": \"REQUEST_ID\", \"value\": \"requestIdValue\" } ] }, " +
                      "\"convergedService\": { \"serviceCapability\": [ { \"entityType\": \"entityTypeValue\", " +
                      "\"actionCode\": \"actionCodeValue\" } ] } } } } }";

        columnValue = json;
        rootNode = objectMapper.readTree(columnValue);
    }

    @Test
    public void testGenerateOrderSuccess() throws Exception {
        // Mocking
        when(cssopApiConfig.getTnInventoryReportTemplate("getTnInventoryReport"))
                .thenReturn(Collections.singletonList(Collections.singletonList(new GenericTableData(columnValue))));
        when(camelServiceImpl.executeCamelService(any(CamelServiceRequest.class)))
                .thenReturn(ResponseEntity.ok("Success"));

        // Execute the method to be tested
        ResponseEntity<Object> response = orderService.generateOrder(request);

        // Assertions
        assertNotNull(response);
        assertEquals(200, response.getStatusCodeValue());
        assertEquals("Success", response.getBody());
    }

    @Test
    public void testGenerateOrderException() {
        // Mocking an exception
        when(cssopApiConfig.getTnInventoryReportTemplate("getTnInventoryReport"))
                .thenThrow(new RuntimeException("Mocked Exception"));

        // Execute the method to be tested
        ResponseEntity<Object> response = orderService.generateOrder(request);

        // Assertions
        assertNull(response); // Expecting the response to be null due to exception handling in the method
    }

    @Test
    public void testMapUserContact() {
        // Execute the method to be tested
        UserContact userContact = orderService.mapUserContact(rootNode, request);

        // Assertions
        assertNotNull(userContact);
        assertEquals("John", userContact.getFirstName());
        assertEquals("Doe", userContact.getLastName());
        assertEquals("sourceValue", userContact.getId());
    }

    @Test
    public void testMapServiceOrderHeader() {
        // Execute the method to be tested
        UserContact userContact = orderService.mapUserContact(rootNode, request);
        ServiceOrderHeader serviceOrderHeader = orderService.mapServiceOrderHeader(rootNode, request, userContact);

        // Assertions
        assertNotNull(serviceOrderHeader);
        assertEquals("flowValue", serviceOrderHeader.getFlow());
        assertTrue(serviceOrderHeader.isSupp());
        assertFalse(serviceOrderHeader.isSuppField());
        assertEquals("regionValue", serviceOrderHeader.getRegion());
        assertEquals("productValue", serviceOrderHeader.getProduct());
        assertEquals("orderTypeValue", serviceOrderHeader.getOrderType());
        assertEquals("serviceTypeValue", serviceOrderHeader.getServiceType());
        assertEquals("functionCodeValue", serviceOrderHeader.getFunctionCode());
        assertEquals("lineOfBusinessValue", serviceOrderHeader.getLineOfBusiness());
        assertEquals("transactionIdValue", serviceOrderHeader.getWorkOrderNumber());
        assertEquals("1.0", serviceOrderHeader.getWorkOrderVersion());
        assertEquals("sourceValue", serviceOrderHeader.getOriginatingSystem());
        assertEquals(userContact, serviceOrderHeader.getUserContact());
    }

    @Test
    public void testMapSpecs() {
        // Execute the method to be tested
        List<Spec> specs = orderService.mapSpecs(rootNode, request, "locationIdValue");

        // Assertions
        assertNotNull(specs);
        assertEquals(4, specs.size());

        // Verifying each spec's code and value
        assertEquals("EnterpriseId", specs.get(0).getCode());
        assertEquals("enterpriseIdValue", specs.get(0).getValue());

        assertEquals("API_NAME", specs.get(1).getCode());
        assertEquals("APINameValue", specs.get(1).getValue());

        assertEquals("locationId", specs.get(2).getCode());
        assertEquals("locationIdValue", specs.get(2).getValue());

        assertEquals("REQUEST_ID", specs.get(3).getCode());
        assertEquals("requestIdValue", specs.get(3).getValue());
    }
}

===============================================================
@Override
	public ResponseEntity<Object> generateOrder(TnInventoryReportRequest request) throws ApplicationInterfaceException{
		ResponseEntity<Object> camelResponse = null;
		String locationIds = String.join(",", request.getLocationId());
		
		List<List<GenericTableData>> tnInventoryReportTemplate = cssopApiConfig.getTnInventoryReportTemplate("getTnInventoryReport");
		 List<GenericTableData> dataList = tnInventoryReportTemplate.get(0);
		 GenericTableData genericTableData = dataList.get(0);
		 String columnValue = genericTableData.getColumnValue();
		 
		 ObjectMapper objectMapper = new ObjectMapper();
		 
		 JsonNode rootNode;
		try {
			rootNode = objectMapper.readTree(columnValue);
			
		    UserContact userContact = mapUserContact(rootNode, request);
		    ServiceOrderHeader serviceOrderHeader = mapServiceOrderHeader(rootNode, request, userContact);
		    List<Spec> specs = mapSpecs(rootNode, request, locationIds);
		    
		    CommonSpecifications commonSpecifications = new CommonSpecifications();
		    commonSpecifications.setSpecification(specs);
		    
		    ServiceCapability serviceCapability = new ServiceCapability();
		    serviceCapability.setEntityType(rootNode.path("serviceOrder").path("services").path("convergedService")
		            .path("serviceCapability").get(0).path("entityType").asText());
		    serviceCapability.setActionCode(rootNode.path("serviceOrder").path("services").path("convergedService")
		            .path("serviceCapability").get(0).path("actionCode").asText());
		    
		    ConvergedService convergedService = new ConvergedService();
		    convergedService.setServiceCapability(Collections.singletonList(serviceCapability));

		    Services services = new Services();
		    services.setCommonSpecifications(commonSpecifications);
		    services.setConvergedService(convergedService);
		    
		    ServiceOrder serviceOrder = new ServiceOrder();
		    serviceOrder.setServiceOrderHeader(serviceOrderHeader);
		    serviceOrder.setServices(services);
		    
		    CamelServiceRequest camelServiceRequest = new CamelServiceRequest();
		    camelServiceRequest.setServiceOrder(serviceOrder);
		    camelResponse = camelServiceImpl.executeCamelService(camelServiceRequest);
		} catch (Exception e) {
			log.error(e.getMessage());
		}		
		return camelResponse;
		}

		public UserContact mapUserContact(JsonNode rootNode, TnInventoryReportRequest request) {
		    JsonNode userContactNode = rootNode.path("serviceOrder").path("serviceOrderHeader").path("userContact");

		    UserContact userContact = new UserContact();
		    userContact.setId(request.getSource());
		    userContact.setFirstName(userContactNode.path("firstName").asText());
		    userContact.setLastName(userContactNode.path("lastName").asText());

		    return userContact;
		}

		public ServiceOrderHeader mapServiceOrderHeader(JsonNode rootNode, TnInventoryReportRequest request, UserContact userContact) {
		    JsonNode headerNode = rootNode.path("serviceOrder").path("serviceOrderHeader");

		    ServiceOrderHeader serviceOrderHeader = new ServiceOrderHeader();
		    serviceOrderHeader.setFlow(headerNode.path("flow").asText());
		    serviceOrderHeader.setSupp(headerNode.path("supp").asBoolean());
		    serviceOrderHeader.setSuppField(headerNode.path("suppField").asBoolean());
		    serviceOrderHeader.setRegion(headerNode.path("region").asText());
		    serviceOrderHeader.setProduct(headerNode.path("product").asText());
		    serviceOrderHeader.setOrderType(headerNode.path("orderType").asText());
		    serviceOrderHeader.setServiceType(headerNode.path("serviceType").asText());
		    serviceOrderHeader.setFunctionCode(headerNode.path("functionCode").asText());
		    serviceOrderHeader.setLineOfBusiness(headerNode.path("lineOfBusiness").asText());
		    serviceOrderHeader.setWorkOrderNumber(request.getTransactionId());
		    serviceOrderHeader.setWorkOrderVersion(headerNode.path("workOrderVersion").asText());
		    serviceOrderHeader.setOriginatingSystem(request.getSource());
		    serviceOrderHeader.setUserContact(userContact);

		    return serviceOrderHeader;
		}

		public List<Spec> mapSpecs(JsonNode rootNode, TnInventoryReportRequest request, String locationIds) {
		    List<Spec> specs = new ArrayList<>();
		    JsonNode specsNode = rootNode.path("serviceOrder").path("services").path("commonSpecifications").path("specification");

		    specsNode.forEach(spec -> {
		        Spec specObj = new Spec();
		        String code = spec.path("code").asText();
		        specObj.setCode(code);

		        switch (code) {
		            case "EnterpriseId":
		                specObj.setValue(request.getEnterpriseId());
		                break;
		            case "API_NAME":
		                specObj.setValue(spec.path("value").asText());
		                break;
		            case "locationId":
		                specObj.setValue(locationIds);
		                break;
		            case "REQUEST_ID":
		                specObj.setValue(request.getRequestId());
		                break;
		            default:
		                specObj.setValue(spec.path("value").asText());
		                break;
		        }
		        specs.add(specObj);
		    });		    
		    return specs;
	}
===============================================================
Updated Code:
@Override
public ResponseEntity<Object> generateOrder(TnInventoryReportRequest request) throws ApplicationInterfaceException {

    // Combine location IDs into a single string
    String locationIds = String.join(",", request.getLocationId());

    // Fetch and parse the column value JSON string
    List<List<GenericTableData>> tnInventoryReportTemplate = tnInventoryReportConfig.getTnInventoryReportTemplate("getTnInventoryReport");
    List<GenericTableData> dataList = tnInventoryReportTemplate.get(0);
    GenericTableData genericTableData = dataList.get(0);
    String columnValue = genericTableData.getColumnValue();
    
    ObjectMapper objectMapper = new ObjectMapper();
    JsonNode rootNode = objectMapper.readTree(columnValue);

    // Extract values from JSON and request
    UserContact userContact = mapUserContact(rootNode, request);
    ServiceOrderHeader serviceOrderHeader = mapServiceOrderHeader(rootNode, request, userContact);
    List<Spec> specs = mapSpecs(rootNode, request, locationIds);

    // Create Common Specifications
    CommonSpecifications commonSpecifications = new CommonSpecifications();
    commonSpecifications.setSpecification(specs);

    // Create Service Capability
    ServiceCapability serviceCapability = new ServiceCapability();
    serviceCapability.setEntityType(rootNode.path("serviceOrder").path("services").path("convergedService")
            .path("serviceCapability").get(0).path("entityType").asText());
    serviceCapability.setActionCode(rootNode.path("serviceOrder").path("services").path("convergedService")
            .path("serviceCapability").get(0).path("actionCode").asText());

    // Set up Converged Service and Services
    ConvergedService convergedService = new ConvergedService();
    convergedService.setServiceCapability(Collections.singletonList(serviceCapability));

    Services services = new Services();
    services.setCommonSpecifications(commonSpecifications);
    services.setConvergedService(convergedService);

    // Build Service Order
    ServiceOrder serviceOrder = new ServiceOrder();
    serviceOrder.setServiceOrderHeader(serviceOrderHeader);
    serviceOrder.setServices(services);

    // Create and return the Camel Service Request
    CamelServiceRequest camelServiceRequest = new CamelServiceRequest();
    camelServiceRequest.setServiceOrder(serviceOrder);

    return ResponseEntity.ok(camelServiceRequest);
}

private UserContact mapUserContact(JsonNode rootNode, TnInventoryReportRequest request) {
    JsonNode userContactNode = rootNode.path("serviceOrder").path("serviceOrderHeader").path("userContact");

    UserContact userContact = new UserContact();
    userContact.setId(request.getSource());
    userContact.setFirstName(userContactNode.path("firstName").asText());
    userContact.setLastName(userContactNode.path("lastName").asText());

    return userContact;
}

private ServiceOrderHeader mapServiceOrderHeader(JsonNode rootNode, TnInventoryReportRequest request, UserContact userContact) {
    JsonNode headerNode = rootNode.path("serviceOrder").path("serviceOrderHeader");

    ServiceOrderHeader serviceOrderHeader = new ServiceOrderHeader();
    serviceOrderHeader.setFlow(headerNode.path("flow").asText());
    serviceOrderHeader.setSupp(headerNode.path("supp").asBoolean());
    serviceOrderHeader.setSuppField(headerNode.path("suppField").asBoolean());
    serviceOrderHeader.setRegion(headerNode.path("region").asText());
    serviceOrderHeader.setProduct(headerNode.path("product").asText());
    serviceOrderHeader.setOrderType(headerNode.path("orderType").asText());
    serviceOrderHeader.setServiceType(headerNode.path("serviceType").asText());
    serviceOrderHeader.setFunctionCode(headerNode.path("functionCode").asText());
    serviceOrderHeader.setLineOfBusiness(headerNode.path("lineOfBusiness").asText());
    serviceOrderHeader.setWorkOrderNumber(request.getTransactionId());
    serviceOrderHeader.setWorkOrderVersion(headerNode.path("workOrderVersion").asText());
    serviceOrderHeader.setOriginatingSystem(request.getSource());
    serviceOrderHeader.setUserContact(userContact);

    return serviceOrderHeader;
}

private List<Spec> mapSpecs(JsonNode rootNode, TnInventoryReportRequest request, String locationIds) {
    List<Spec> specs = new ArrayList<>();
    JsonNode specsNode = rootNode.path("serviceOrder").path("services").path("commonSpecifications").path("specification");

    specsNode.forEach(spec -> {
        Spec specObj = new Spec();
        String code = spec.path("code").asText();
        specObj.setCode(code);

        switch (code) {
            case "EnterpriseId":
                specObj.setValue(request.getEnterpriseId());
                break;
            case "API_NAME":
                specObj.setValue(spec.path("value").asText());
                break;
            case "locationId":
                specObj.setValue(locationIds);
                break;
            case "REQUEST_ID":
                specObj.setValue(request.getRequestId());
                break;
            default:
                specObj.setValue(spec.path("value").asText());
                break;
        }

        specs.add(specObj);
    });

    return specs;
}

===============================================================
UserContact userContact = new UserContact();
    	userContact.setId("CSSOP");
    	userContact.setFirstName("CSSOP");
    	userContact.setLastName("CSSOP");
    	
    	ServiceOrderHeader serviceOrderHeader = new ServiceOrderHeader();
    	serviceOrderHeader.setFlow("VRD-TSO");
    	serviceOrderHeader.setSupp(false);
    	serviceOrderHeader.setSuppField(false);
    	serviceOrderHeader.setRegion("US");
    	serviceOrderHeader.setProduct("VOIP");
    	serviceOrderHeader.setOrderType("CHANGE");
    	serviceOrderHeader.setServiceType("IP Trunking");
    	serviceOrderHeader.setFunctionCode("RELEASE");
    	serviceOrderHeader.setLineOfBusiness("RETAIL_VOIP");
    	serviceOrderHeader.setWorkOrderNumber(body.getTransactionId());
    	serviceOrderHeader.setWorkOrderVersion("0");
    	serviceOrderHeader.setOriginatingSystem(body.getSource());
    	serviceOrderHeader.setUserContact(userContact);
    	
    	Spec spec1 = new Spec();
    	spec1.setCode("EnterpriseId");
    	spec1.setValue(body.getEnterpriseId());
    	
    	Spec spec2 = new Spec();
    	spec2.setCode("API_NAME");
    	spec2.setValue("getTnInventoryReport");
    	
    	Spec spec3 = new Spec();
    	spec3.setCode("locationId");
    	spec3.setValue(locationIds);
    	
    	Spec spec4 = new Spec();
    	spec4.setCode("REQUEST_ID");
    	spec4.setValue(body.getRequestId());
    	
    	List<Spec> specs = new ArrayList<>();
    	specs.add(spec1);
    	specs.add(spec2);
    	specs.add(spec3);
    	specs.add(spec4);
    	
    	CommonSpecifications commonSpecifications = new CommonSpecifications();   	
    	commonSpecifications.setSpecification(specs);   	
    	
    	ServiceCapability serviceCapability = new ServiceCapability();
    	serviceCapability.setEntityType("TNINVREPORT");
    	serviceCapability.setActionCode("CHANGE");   	
    	
    	List<ServiceCapability> serviceCapabilities = new ArrayList<>();
    	serviceCapabilities.add(serviceCapability);
    	
    	ConvergedService convergedService = new ConvergedService();
    	convergedService.setServiceCapability(serviceCapabilities);
    	
    	Services services = new Services();
    	services.setCommonSpecifications(commonSpecifications);
    	services.setConvergedService(convergedService);
    	
    	ServiceOrder serviceOrder = new ServiceOrder();
    	serviceOrder.setServiceOrderHeader(serviceOrderHeader);
    	serviceOrder.setServices(services);
    	
    	CamelServiceRequest camelServiceRequest = new CamelServiceRequest();
    	camelServiceRequest.setServiceOrder(serviceOrder);
===============================================================
String columnValue = genericTableData.getColumnValue();
------------------------------------------------------------
{
	"serviceOrder": {
		"serviceOrderHeader": {
			"flow": "VRD-TSO",
			"supp": false,
			"suppField": false,
			"region": "US",
			"product": "VOIP",
			"orderType": "CHANGE",
			"serviceType": "IP Trunking",
			"functionCode": "RELEASE",
			"lineOfBusiness": "RETAIL_VOIP",
			"workOrderNumber": "",
			"workOrderVersion": "0",
			"originatingSystem": "",
			"userContact": {
				"id": "CSSOP",
				"firstName": "CSSOP",
				"lastName": "CSSOP"
			}
		},
		"services": {
			"commonSpecifications": {
				"specification": [
					{
						"code": "EnterpriseId",
						"value": ""
					},
					{
						"code": "API_NAME",
						"value": "getTnInventoryReport"
					},
					{
						"code": "locationId",
						"value": ""
					},
					{
						"code": "REQUEST_ID",
						"value": ""
					}
				]
			},
			"convergedService": {
				"serviceCapability": [
					{
						"entityType": "TNINVREPORT",
						"actionCode": "CHANGE"
					}
				]
			}
		}
	}
}

@Override
	public ResponseEntity<Object> generateOrder(TnInventoryReportRequest request) throws ApplicationInterfaceException {
		//ResponseEntity<Object> camelResponse = camelServiceImpl.executeCamelService(request);
		
		String locationIds = String.join(",", request.getLocationId());
		
		 List<List<GenericTableData>> tnInventoryReportTemplate = tnInventoryReportConfig.getTnInventoryReportTemplate("getTnInventoryReport");
		 List<GenericTableData> dataList = tnInventoryReportTemplate.get(0);
		 GenericTableData genericTableData = dataList.get(0);
		 String columnValue = genericTableData.getColumnValue();
		 
		
		return null;
	}



{
  "transactionId":"C_MJZ1d1655195592559",
  "requestId" : “e444f944-cfb5-4e75-abc8-a2712cbbe2f4”,
  "enterpriseId" : "ENT819164169",
  "locationId" : ["Loc819180638", “Loc819180639”],
  "source": “CSSOP”
}

=============================================================================
New Query
WITH entity_references AS (
    SELECT 
        jsonb_array_elements(entity_reference->'entityReferance') AS entity_ref
    FROM 
        svcinv.t_service_inventory
    WHERE
        (entity_reference->'entityReferance' @> '[{"entityType": "ENTERPRISE"}]'::jsonb)
        OR
        (entity_reference->'entityReferance' @> '[{"entityType": "LOCATION"}]'::jsonb)
),
entity_child_data_extracted AS (
    SELECT
        t.entity_ref->>'entityId' AS entity_id,
        t.entity_ref->>'entityName' AS entity_name,
        jsonb_array_elements(entity_child_data->'entityChildReferenceData') AS child_ref_data
    FROM 
        svcinv.t_service_inventory t
        JOIN entity_references e ON e.entity_ref->>'entityId' = t.entity_ref->>'entityId'
),
attributes_extracted AS (
    SELECT
        entity_id,
        entity_name,
        jsonb_array_elements(child_ref_data->'childEntityData') AS child_data
    FROM 
        entity_child_data_extracted
),
final_result AS (
    SELECT
        entity_id,
        entity_name,
        MAX((child_data->'childEntityAttributes'->'attributes')::jsonb->'DEVICE_ID'->>'specValue') AS device_id,
        MAX((child_data->'childEntityAttributes'->'attributes')::jsonb->'LOCATION_ID'->>'specValue') AS location_id,
        MAX((child_data->'childEntityAttributes'->'attributes')::jsonb->'DEVICE_TYPE'->>'specValue') AS device_type,
        MAX((child_data->'childEntityAttributes'->'attributes')::jsonb->'CPE_CHARACTERISTIC'->>'specValue') AS cpe_characteristic,
        MAX((child_data->'childEntityAttributes'->'attributes')::jsonb->'CUSTOMER_SIGNALING_SUBNET'->>'specValue') AS customer_signaling_subnet,
        MAX((child_data->'childEntityAttributes'->'attributes')::jsonb->'CUSTOMER_SIGNALING_VLAN'->>'specValue') AS customer_signaling_vlan,
        MAX((child_data->'childEntityAttributes'->'attributes')::jsonb->'CUSTOMER_MEDIA_VLAN'->>'specValue') AS customer_media_vlan,
        MAX((child_data->'childEntityAttributes'->'attributes')::jsonb->'IP_VERSION'->>'specValue') AS ip_version,
        MAX((child_data->'childEntityAttributes'->'attributes')::jsonb->'DNS_PRIORITY'->>'specValue') AS dns_priority,
        MAX((child_data->'childEntityAttributes'->'attributes')::jsonb->'SIGNALING_FQDN'->>'specValue') AS signaling_fqdn,
        MAX((child_data->'childEntityAttributes'->'attributes')::jsonb->'CUSTOMER_SIGNALING_BASE_IP'->>'specValue') AS customer_signaling_base_ip,
        MAX((child_data->'childEntityAttributes'->'attributes')::jsonb->'SBC_INDEX'->>'specValue') AS sbc_index
    FROM
        attributes_extracted
    GROUP BY
        entity_id, entity_name
)
SELECT
    entity_id,
    entity_name,
    COALESCE(device_id, 'NULL') AS device_id,
    COALESCE(location_id, 'NULL') AS location_id,
    COALESCE(device_type, 'NULL') AS device_type,
    COALESCE(cpe_characteristic, 'NULL') AS cpe_characteristic,
    COALESCE(customer_signaling_subnet, 'NULL') AS customer_signaling_subnet,
    COALESCE(customer_signaling_vlan, 'NULL') AS customer_signaling_vlan,
    COALESCE(customer_media_vlan, 'NULL') AS customer_media_vlan,
    COALESCE(ip_version, 'NULL') AS ip_version,
    COALESCE(dns_priority, 'NULL') AS dns_priority,
    COALESCE(signaling_fqdn, 'NULL') AS signaling_fqdn,
    COALESCE(customer_signaling_base_ip, 'NULL') AS customer_signaling_base_ip,
    COALESCE(sbc_index, 'NULL') AS sbc_index
FROM
    final_result;

===========================================
Specs
 'specName' = 'DEVICE_ID'
   'specName' = 'LOCATION_ID'
   'specName' = 'DEVICE_TYPE'
   'specName' = 'CPE_CHARACTERISTIC'
   'specName' = 'CUSTOMER_SIGNALING_SUBNET'
   'specName' = 'CUSTOMER_SIGNALING_VLAN'
   'specName' = 'CUSTOMER_MEDIA_VLAN'
   'specName' = 'IP_VERSION'
   'specName' = 'DNS_PRIORITY'
   'specName' = 'SIGNALING_FQDN'
   'specName' = 'CUSTOMER_SIGNALING_BASE_IP'
   'specName' = 'SBC_INDEX'
=================================
Null check
WITH parsed_data AS (
    SELECT
        entity_reference_array ->> 'entityId' AS enterpriseid,
        jsonb_array_elements(entity_child_data -> 'entityChildReferenceData') AS childRef,
        entityAttributes->>'specName' AS specName,
        entityAttributes->>'specValue' AS specValue
    FROM
        svcinv.t_service_inventory,
        jsonb_array_elements(entity_reference -> 'entityReferance') entity_reference_array,
        jsonb_array_elements(entity_attributes->'entityAttributes') entityAttributes
    WHERE
        entity_type = 'SBC'
        AND (
            (entity_reference_array ->> 'entityType' = 'ENTERPRISE' AND entity_reference_array ->> 'entityId' = '400304906')
            OR
            (entity_reference_array ->> 'entityType' = 'LOCATION' AND entity_reference_array ->> 'entityId' = '52057')
        )
),
filtered_data AS (
    SELECT
        enterpriseid,
        childRef ->> 'childEntityType' AS childEntityType,
        jsonb_array_elements(cast(childRef -> 'childEntityData' AS jsonb) -> 'childEntityAttributes') AS childEntityAttributes
    FROM
        parsed_data
    WHERE
        childRef ->> 'childEntityType' IN ('DEVICE', 'NODE_INFRA_PROVISIONING', 'SIGNALING_INTERFACE', 'SBC_INFRA_PROVISIONING', 'GATEWAY_SBC')
),
device_filtered AS (
    SELECT
        fd.enterpriseid,
        ca ->> 'specName' AS specName,
        ca ->> 'specValue' AS specValue,
        fd.childEntityAttributes
    FROM
        filtered_data fd,
        LATERAL jsonb_array_elements(fd.childEntityAttributes -> 'attributes') ca
    WHERE
        ca ->> 'specName' = 'DEVICE_ID'
        AND ca ->> 'specValue' = '44'
)
SELECT DISTINCT
    df.enterpriseid,
    COALESCE(ca1 ->> 'specValue', 'NULL') AS DeviceID,
    COALESCE(ca2 ->> 'specValue', 'NULL') AS LocationID,
    COALESCE(ca3 ->> 'specValue', 'NULL') AS RealDeviceType,
    COALESCE(ca4 ->> 'specValue', 'NULL') AS CPECharacteristic,
    COALESCE(ca5 ->> 'specValue', 'NULL') AS CustomerSignalingSubnet,
    COALESCE(ca6 ->> 'specValue', 'NULL') AS CustomerSignalingVLAN,
    COALESCE(ca7 ->> 'specValue', 'NULL') AS CustomerMediaVLAN,
    COALESCE(ca8 ->> 'specValue', 'NULL') AS IP_Version,
    COALESCE(ca9 ->> 'specValue', 'NULL') AS DnsPriority,
    COALESCE(ca10 ->> 'specValue', 'NULL') AS CarrierSignalingFqdn,
    COALESCE(ca101 ->> 'specValue', 'NULL') AS CustomerSignalingBaseIP,
    COALESCE(ca102 ->> 'specValue', 'NULL') AS SbcIndex
FROM
    device_filtered df
    LEFT JOIN LATERAL jsonb_array_elements(df.childEntityAttributes -> 'attributes') ca1 ON ca1 ->> 'specName' = 'DEVICE_ID'
    LEFT JOIN LATERAL jsonb_array_elements(df.childEntityAttributes -> 'attributes') ca2 ON ca2 ->> 'specName' = 'LOCATION_ID'
    LEFT JOIN LATERAL jsonb_array_elements(df.childEntityAttributes -> 'attributes') ca3 ON ca3 ->> 'specName' = 'DEVICE_TYPE'
    LEFT JOIN LATERAL jsonb_array_elements(df.childEntityAttributes -> 'attributes') ca4 ON ca4 ->> 'specName' = 'CPE_CHARACTERISTIC'
    LEFT JOIN LATERAL jsonb_array_elements(df.childEntityAttributes -> 'attributes') ca5 ON ca5 ->> 'specName' = 'CUSTOMER_SIGNALING_SUBNET'
    LEFT JOIN LATERAL jsonb_array_elements(df.childEntityAttributes -> 'attributes') ca6 ON ca6 ->> 'specName' = 'CUSTOMER_SIGNALING_VLAN'
    LEFT JOIN LATERAL jsonb_array_elements(df.childEntityAttributes -> 'attributes') ca7 ON ca7 ->> 'specName' = 'CUSTOMER_MEDIA_VLAN'
    LEFT JOIN LATERAL jsonb_array_elements(df.childEntityAttributes -> 'attributes') ca8 ON ca8 ->> 'specName' = 'IP_VERSION'
    LEFT JOIN LATERAL jsonb_array_elements(df.childEntityAttributes -> 'attributes') ca9 ON ca9 ->> 'specName' = 'DNS_PRIORITY'
    LEFT JOIN LATERAL jsonb_array_elements(df.childEntityAttributes -> 'attributes') ca10 ON ca10 ->> 'specName' = 'SIGNALING_FQDN'
    LEFT JOIN LATERAL jsonb_array_elements(df.childEntityAttributes -> 'attributes') ca101 ON ca101 ->> 'specName' = 'CUSTOMER_SIGNALING_BASE_IP'
    LEFT JOIN LATERAL jsonb_array_elements(df.childEntityAttributes -> 'attributes') ca102 ON ca102 ->> 'specName' = 'SBC_INDEX';

=========================================================
select
		distinct child_attributes.enterpriseid,
		childEntityData1 ->> 'specValue' as DeviceID,
		childEntityData2 ->> 'specValue' as LocationID,
		childEntityData3 ->> 'specValue' as RealDeviceType,
		childEntityData4 ->> 'specValue' as CPECharacteristic,
		childEntityData5 ->> 'specValue' as CustomerSignalingSubnet,
		childEntityData6 ->> 'specValue' as CustomerSignalingVLAN,
		childEntityData7 ->> 'specValue' as CustomerMediaVLAN,
		childEntityData8 ->> 'specValue' as IP_Version,
		childEntityData9 ->> 'specValue' as DnsPriority,
		childEntityData10 ->> 'specValue' as CarrierSignalingFqdn,
		childEntityData101 ->> 'specValue' as CustomerSignalingBaseIP,
		childEntityData102 ->> 'specValue' as SbcIndex
	    from
		 (
		  select
			enterpriseid,
			jsonb_array_elements(cast(group_child_data.childEntityData as jsonb))->>'childEntityAttributes' as childEntityAttributes,
			jsonb_array_elements(cast(group_child_data.childEntityData11 as jsonb))->>'childEntityAttributes' as childEntityAttributes21,
			jsonb_array_elements(cast(group_child_data.childEntityData12 as jsonb))->>'childEntityAttributes' as childEntityAttributes22,
			jsonb_array_elements(cast(group_child_data.childEntityData13 as jsonb))->>'childEntityAttributes' as childEntityAttributes23,
			jsonb_array_elements(cast(group_child_data.childEntityData14 as jsonb))->>'childEntityAttributes' as childEntityAttributes24
		  from
			(
			select
				entity_reference_array ->> 'entityId' as enterpriseid,
				entityChildReferenceData->>'childEntityData' as childEntityData,
				entityChildReferenceData1->>'childEntityData' as childEntityData11,
				entityChildReferenceData2->>'childEntityData' as childEntityData12,
				entityChildReferenceData3->>'childEntityData' as childEntityData13,
				entityChildReferenceData4->>'childEntityData' as childEntityData14,
				entityAttributes->>'specName' specName,
				entityAttributes->>'specValue' specValue
			from
				svcinv.t_service_inventory,
				jsonb_array_elements(entity_child_data -> 'entityChildReferenceData') entityChildReferenceData,
				jsonb_array_elements(entity_child_data -> 'entityChildReferenceData') entityChildReferenceData1,
				jsonb_array_elements(entity_child_data -> 'entityChildReferenceData') entityChildReferenceData2,
				jsonb_array_elements(entity_child_data -> 'entityChildReferenceData') entityChildReferenceData3,
				jsonb_array_elements(entity_child_data -> 'entityChildReferenceData') entityChildReferenceData4,
				jsonb_array_elements(entity_reference -> 'entityReferance') entity_reference_array,
				jsonb_array_elements(entity_reference -> 'entityReferance') entity_reference_array1,
				jsonb_array_elements(entity_attributes->'entityAttributes') entityAttributes,
				jsonb_array_elements(entity_child_data -> 'entityChildReferenceData') entityChildReferenceData5,
				jsonb_array_elements(entityChildReferenceData5 -> 'childEntityData') childEntityData31,
				jsonb(childEntityData31 -> 'childEntityAttributes') childEntityAttributes32,
				jsonb_array_elements(childEntityAttributes32 ->'attributes') childEntityData33
			where
				entity_type = 'SBC'
				and entityChildReferenceData ->>'childEntityType' = 'DEVICE'
				and entityChildReferenceData1 ->>'childEntityType' = 'NODE_INFRA_PROVISIONING'
				and entityChildReferenceData2 ->>'childEntityType' = 'SIGNALING_INTERFACE'
				and entityChildReferenceData3 ->>'childEntityType' = 'SBC_INFRA_PROVISIONING'
				and entityChildReferenceData4 ->>'childEntityType' = 'GATEWAY_SBC'
				and childEntityData33->>'specName'='DEVICE_ID' 
				and childEntityData33->>'specValue'= '44'
				and entity_reference_array1 ->> 'entityType'='LOCATION'
				and entity_reference_array1 ->> 'entityId'= '52057'
				and entity_reference_array ->> 'entityType'='ENTERPRISE'
				and entity_reference_array ->> 'entityId'= '400304906'
	        ) group_child_data
          ) child_attributes,
		 jsonb_array_elements(cast(child_attributes.childEntityAttributes as jsonb) ->'attributes') childEntityData1,
		 jsonb_array_elements(cast(child_attributes.childEntityAttributes as jsonb) ->'attributes') childEntityData2,
		 jsonb_array_elements(cast(child_attributes.childEntityAttributes as jsonb) ->'attributes') childEntityData3,
		 jsonb_array_elements(cast(child_attributes.childEntityAttributes as jsonb) ->'attributes') childEntityData4,
		 jsonb_array_elements(cast(child_attributes.childEntityAttributes21 as jsonb) ->'attributes') childEntityData5,
		 jsonb_array_elements(cast(child_attributes.childEntityAttributes21 as jsonb) ->'attributes') childEntityData6,
		 jsonb_array_elements(cast(child_attributes.childEntityAttributes21 as jsonb) ->'attributes') childEntityData7,
		 jsonb_array_elements(cast(child_attributes.childEntityAttributes21 as jsonb) ->'attributes') childEntityData8,
		 jsonb_array_elements(cast(child_attributes.childEntityAttributes22 as jsonb) ->'attributes') childEntityData9,
		 jsonb_array_elements(cast(child_attributes.childEntityAttributes22 as jsonb) ->'attributes') childEntityData10,
		 jsonb_array_elements(cast(child_attributes.childEntityAttributes23 as jsonb) ->'attributes') childEntityData101,
		 jsonb_array_elements(cast(child_attributes.childEntityAttributes24 as jsonb) ->'attributes') childEntityData102
	    where
		childEntityData1 ->> 'specName' = 'DEVICE_ID'
		and childEntityData2 ->> 'specName' = 'LOCATION_ID'
		and childEntityData3 ->> 'specName' = 'DEVICE_TYPE'
		and childEntityData4 ->> 'specName' = 'CPE_CHARACTERISTIC'
		and childEntityData5 ->> 'specName' = 'CUSTOMER_SIGNALING_SUBNET'
		and childEntityData6 ->> 'specName' = 'CUSTOMER_SIGNALING_VLAN'
		and childEntityData7 ->> 'specName' = 'CUSTOMER_MEDIA_VLAN'
		and childEntityData8 ->> 'specName' = 'IP_VERSION'
		and childEntityData9 ->> 'specName' = 'DNS_PRIORITY'
	    and childEntityData10 ->> 'specName' = 'SIGNALING_FQDN'
	    and childEntityData101 ->> 'specName' = 'CUSTOMER_SIGNALING_BASE_IP'
	    and childEntityData102 ->> 'specName' = 'SBC_INDEX';

==================================================================================
entity_reference column
{
  "entityReferance": [
    {
      "entityId": "52057",
      "entityName": "LOC_821_US",
      "entityType": "LOCATION"
    },
    {
      "entityId": "400304906",
      "entityName": "ENT_821_US",
      "entityType": "ENTERPRISE"
    }
  ]
}
========================================================================
entity_child_data column
{
  "entityChildReferenceData": [
    {
      "childEntityData": [
        {
          "childEntityAttributes": {
            "attributes": [
              {
                "specName": "NODE_SBC_INFRA_PROVISIONING_ID",
                "specValue": "TPAMI1_TPA1"
              },
              {
                "specName": "VPN_NAME",
                "specValue": "PUB-Internet__"
              },
              {
                "specName": "IP_VERSION",
                "specValue": "IPv4"
              },
              {
                "specName": "ACCESS_TYPE",
                "specValue": "IDS"
              }
            ]
          },
          "keyIdentifierAttributes": {
            "attributes": [
              {
                "specName": "NODE_SBC_INFRA_PROVISIONING_ID",
                "specValue": "TPAMI1_TPA1"
              }
            ]
          },
          "parentKeyIdentifierAttributes": {
            "attributes": []
          }
        }
      ],
      "childEntityType": "NODE_SBC_INFRA_PROVISIONING"
    },
    {
      "childEntityData": [
        {
          "childEntityAttributes": {
            "attributes": [
              {
                "specName": "NAME",
                "specValue": "LOC_821_US"
              },
              {
                "specName": "PE_IP_ADDRESS",
                "specValue": "172.1.2.17"
              },
              {
                "specName": "CE_IP_ADDRESS",
                "specValue": "172.1.2.19"
              },
              {
                "specName": "PVC_DLCI",
                "specValue": "11111111"
              },
              {
                "specName": "PVC_CIRCUIT",
                "specValue": ""
              },
              {
                "specName": "ROUTER_CLLI",
                "specValue": "TPAMI1SBC1"
              }
            ]
          },
          "keyIdentifierAttributes": {
            "attributes": []
          },
          "parentKeyIdentifierAttributes": {
            "attributes": []
          }
        }
      ],
      "childEntityType": "SBC_ROUTER"
    },
    {
      "childEntityData": [
        {
          "childEntityAttributes": {
            "attributes": [
              {
                "specName": "DEVICE_MAP_ID",
                "specValue": "1332199"
              },
              {
                "specName": "DEVICE_NAME",
                "specValue": "Nokia1334"
              },
              {
                "specName": "INTERNAL_ADMIN",
                "specValue": "-1"
              },
              {
                "specName": "END_POINT_TYPE",
                "specValue": ""
              },
              {
                "specName": "DEVICE_CHAR_ID",
                "specValue": "2"
              },
              {
                "specName": "DEVICE_ID",
                "specValue": "44"
              },
              {
                "specName": "ADDRESS",
                "specValue": "28.21.92.41"
              },
              {
                "specName": "FQDN",
                "specValue": "Nokia1334627.globalipcom.com"
              },
              {
                "specName": "TERM_CALLING_IND",
                "specValue": ""
              },
              {
                "specName": "TRANSPORT",
                "specValue": "UDP"
              },
              {
                "specName": "PARENT_DOMAIN",
                "specValue": "globalipcom.com"
              },
              {
                "specName": "SIP_DOMAIN",
                "specValue": "627.globalipcom.com"
              },
              {
                "specName": "SIG_TIER_OVERRIDE_FLAG",
                "specValue": ""
              },
              {
                "specName": "DEVICE_REAL_TYPE",
                "specValue": "Cisco 5400-Trunk Shared"
              },
              {
                "specName": "SBC_PROV_METHOD",
                "specValue": "ESAP"
              },
              {
                "specName": "LNP_TRANSITION_FLAG",
                "specValue": ""
              },
              {
                "specName": "PROXY_CLUSTER",
                "specValue": ""
              },
              {
                "specName": "NS_URI",
                "specValue": ""
              },
              {
                "specName": "PQ_INSTANCE_ID",
                "specValue": ""
              },
              {
                "specName": "CODEC",
                "specValue": "Codec"
              },
              {
                "specName": "DEVICE_TYPE",
                "specValue": "CPE_ENTPRISE_GTWY_SHARED"
              },
              {
                "specName": "BS_DEVICE_TYPE",
                "specValue": "Cisco 5400-Trunk (sp)"
              },
              {
                "specName": "NET_ADDRESS",
                "specValue": "1332199"
              },
              {
                "specName": "ORDER_PRO_TIN",
                "specValue": "727658107334"
              },
              {
                "specName": "ORDER_VERSION",
                "specValue": "0"
              },
              {
                "specName": "ENTITY_ID",
                "specValue": "1332199"
              },
              {
                "specName": "ENTITY_NAME",
                "specValue": "Nokia1334"
              },
              {
                "specName": "COUNTRY_CODE",
                "specValue": "US"
              },
              {
                "specName": "STN",
                "specValue": "12146709077"
              },
              {
                "specName": "STN",
                "specValue": "12146709077"
              },
              {
                "specName": "HUNT_STRATEGY",
                "specValue": "HUNT"
              },
              {
                "specName": "PORT",
                "specValue": ""
              },
              {
                "specName": "SEC_IP_ADDRESS",
                "specValue": "57.15.99.37"
              }
            ]
          },
          "keyIdentifierAttributes": {
            "attributes": [
              {
                "specName": "DEVICE_ID",
                "specValue": "44"
              }
            ]
          },
          "parentKeyIdentifierAttributes": {
            "attributes": []
          }
        }
      ],
      "childEntityType": "DEVICE"
    },
    {
      "childEntityData": [
        {
          "childEntityAttributes": {
            "attributes": [
              {
                "specName": "INTERFACE_STATE_ENABLED",
                "specValue": "Y"
              },
              {
                "specName": "DNS_ACCESS_TYPE",
                "specValue": "sn"
              },
              {
                "specName": "DNS_DEVICE_SEQ_NUM",
                "specValue": "n87465"
              },
              {
                "specName": "INTERFACE_STATE_ENABLED",
                "specValue": "Y"
              },
              {
                "specName": "SIGNALING_INTERFACE_IP",
                "specValue": "166.34.120.12"
              },
              {
                "specName": "SIGNALING_FQDN",
                "specValue": "snn87465.vika856.globalipcom.com"
              },
              {
                "specName": "SIGNALING_INTERFACE_PORT",
                "specValue": "6504"
              },
              {
                "specName": "DNS_PRIORITY",
                "specValue": "100"
              },
              {
                "specName": "INTERFACE_NETWORK_TYPE",
                "specValue": "CARRIER"
              },
              {
                "specName": "TRANSPORT_PROTOCOL",
                "specValue": "UDP"
              }
            ]
          },
          "keyIdentifierAttributes": {
            "attributes": [
              {
                "specName": "SIGNALING_FQDN",
                "specValue": "snn87465.vika856.globalipcom.com"
              }
            ]
          },
          "parentKeyIdentifierAttributes": {
            "attributes": []
          }
        },
        {
          "childEntityAttributes": {
            "attributes": [
              {
                "specName": "INTERFACE_STATE_ENABLED",
                "specValue": "Y"
              },
              {
                "specName": "DNS_ACCESS_TYPE",
                "specValue": "sc"
              },
              {
                "specName": "DNS_DEVICE_SEQ_NUM",
                "specValue": "n87465"
              },
              {
                "specName": "INTERFACE_STATE_ENABLED",
                "specValue": "Y"
              },
              {
                "specName": "SIGNALING_INTERFACE_IP",
                "specValue": "172.30.200.12"
              },
              {
                "specName": "SIGNALING_FQDN",
                "specValue": "scn87465.vika856.globalipcom.com"
              },
              {
                "specName": "SIGNALING_INTERFACE_PORT",
                "specValue": "6504"
              },
              {
                "specName": "DNS_PRIORITY",
                "specValue": "100"
              },
              {
                "specName": "INTERFACE_NETWORK_TYPE",
                "specValue": "CUSTOMER"
              },
              {
                "specName": "TRANSPORT_PROTOCOL",
                "specValue": "UDP"
              }
            ]
          },
          "keyIdentifierAttributes": {
            "attributes": [
              {
                "specName": "SIGNALING_FQDN",
                "specValue": "scn87465.vika856.globalipcom.com"
              }
            ]
          },
          "parentKeyIdentifierAttributes": {
            "attributes": []
          }
        }
      ],
      "childEntityType": "SIGNALING_INTERFACE"
    },
    {
      "childEntityData": [
        {
          "childEntityAttributes": {
            "attributes": [
              {
                "specName": "BW_POLICING_ENABLED",
                "specValue": "N"
              },
              {
                "specName": "CARRIER_MEDIA_VLAN",
                "specValue": "114"
              },
              {
                "specName": "CARRIER_SIGNALING_VLAN",
                "specValue": "113"
              },
              {
                "specName": "CUSTOMER_MEDIA_SUBNET",
                "specValue": ""
              },
              {
                "specName": "CUSTOMER_MEDIA_VLAN",
                "specValue": "112"
              },
              {
                "specName": "PROV_SBC_INFRA",
                "specValue": "N"
              },
              {
                "specName": "CUSTOMER_SIGNALING_BASE_IP",
                "specValue": "172.30.200.0"
              },
              {
                "specName": "CUSTOMER_SIGNALING_SUBNET",
                "specValue": ""
              },
              {
                "specName": "CUSTOMER_SIGNALING_VLAN",
                "specValue": "111"
              },
              {
                "specName": "DNS_IP1",
                "specValue": "63.79.81.2"
              },
              {
                "specName": "DNS_IP2",
                "specValue": "63.79.81.2"
              },
              {
                "specName": "IP_VERSION",
                "specValue": "IPv4"
              },
              {
                "specName": "SIG_POLICING_ENABLED",
                "specValue": "N"
              },
              {
                "specName": "NODE_NAME",
                "specValue": "TPAMI1"
              },
              {
                "specName": "SBC_CLLI",
                "specValue": "TPAMI1SBC1"
              },
              {
                "specName": "NODE_SBC_INFRA_PROVISIONING_ID",
                "specValue": ""
              },
              {
                "specName": "SBC_SECONDARY_CCL",
                "specValue": "0"
              },
              {
                "specName": "SBC_PRIMARY_CCL",
                "specValue": "10"
              },
              {
                "specName": "SBC_SHORT_NAME",
                "specValue": "TPA1"
              },
              {
                "specName": "CUSTOMER_SBC_SIGNALING_INTERFACE",
                "specValue": "ge0-0"
              },
              {
                "specName": "CARR_SIG_INTERFACE",
                "specValue": "ge1-0"
              },
              {
                "specName": "CUSTOMER_SBC_SIGNALING_INTERFACE",
                "specValue": "ge0-0"
              },
              {
                "specName": "CARR_SIG_INTERFACE",
                "specValue": "ge1-0"
              }
            ]
          },
          "keyIdentifierAttributes": {
            "attributes": [
              {
                "specName": "SBC_SHORT_NAME",
                "specValue": "TPA1"
              }
            ]
          },
          "parentKeyIdentifierAttributes": {
            "attributes": []
          }
        }
      ],
      "childEntityType": "SBC_INFRA_PROVISIONING"
    },
    {
      "childEntityData": [
        {
          "childEntityAttributes": {
            "attributes": [
              {
                "specName": "SBC_INDEX",
                "specValue": ""
              },
              {
                "specName": "SBC_CLLI",
                "specValue": "TPAMI1SBC1"
              },
              {
                "specName": "SBC_SHORT_NAME",
                "specValue": "TPA1"
              }
            ]
          },
          "keyIdentifierAttributes": {
            "attributes": [
              {
                "specName": "SBC_INDEX",
                "specValue": ""
              }
            ]
          },
          "parentKeyIdentifierAttributes": {
            "attributes": []
          }
        }
      ],
      "childEntityType": "GATEWAY_SBC"
    },
    {
      "childEntityData": [
        {
          "childEntityAttributes": {
            "attributes": [
              {
                "specName": "CUSTOMER_MEDIA_GATEWAY_IP",
                "specValue": "172.30.200.129"
              },
              {
                "specName": "NWK_NODE_ID",
                "specValue": "7"
              },
              {
                "specName": "CUSTOMER_SIGNALING_SUBNET",
                "specValue": "172.30.200.1"
              },
              {
                "specName": "CUSTOMER_SIGNALING_VLAN",
                "specValue": "111"
              },
              {
                "specName": "CUSTOMER_SIGNALING_GATEWAY_IP",
                "specValue": "172.30.200.1"
              },
              {
                "specName": "IP_VERSION",
                "specValue": "IPv4"
              },
              {
                "specName": "NODE_ACCESS_CATEGORY",
                "specValue": ""
              },
              {
                "specName": "VRRP_GROUP",
                "specValue": "0"
              },
              {
                "specName": "ACTIVATE_ROUTER",
                "specValue": "N"
              },
              {
                "specName": "CUSTOMER_MEDIA_VLAN",
                "specValue": "112"
              },
              {
                "specName": "CUSTOMER_MEDIA_SUBNET",
                "specValue": "172.30.200.128"
              },
              {
                "specName": "SECONDARY_ROUTER_CLLI",
                "specValue": "TPAMI1R2"
              },
              {
                "specName": "PRIMARY_ROUTER_CLLI",
                "specValue": "TPAMI1R1"
              },
              {
                "specName": "ACCESS_TYPE",
                "specValue": "IDS"
              },
              {
                "specName": "NODE_NAME",
                "specValue": "TPAMI1"
              },
              {
                "specName": "VPN_NAME",
                "specValue": "PUB-Internet__"
              }
            ]
          },
          "keyIdentifierAttributes": {
            "attributes": [
              {
                "specName": "NODE_NAME",
                "specValue": "TPAMI1"
              }
            ]
          },
          "parentKeyIdentifierAttributes": {
            "attributes": []
          }
        }
      ],
      "childEntityType": "NODE_INFRA_PROVISIONING"
    }
  ]
}

===================================
WITH parsed_data AS (
    SELECT
        entity_reference_array ->> 'entityId' AS enterpriseid,
        jsonb_array_elements(entity_child_data -> 'entityChildReferenceData') AS childRef,
        entityAttributes->>'specName' AS specName,
        entityAttributes->>'specValue' AS specValue
    FROM
        svcinv.t_service_inventory,
        jsonb_array_elements(entity_reference -> 'entityReferance') entity_reference_array,
        jsonb_array_elements(entity_attributes->'entityAttributes') entityAttributes
    WHERE
        entity_type = 'SBC'
        AND (
            (entity_reference_array ->> 'entityType' = 'ENTERPRISE' AND entity_reference_array ->> 'entityId' = '400304906')
            OR
            (entity_reference_array ->> 'entityType' = 'LOCATION' AND entity_reference_array ->> 'entityId' = '52057')
        )
),
filtered_data AS (
    SELECT
        enterpriseid,
        childRef ->> 'childEntityType' AS childEntityType,
        jsonb_array_elements(cast(childRef -> 'childEntityData' AS jsonb) -> 'childEntityAttributes') AS childEntityAttributes
    FROM
        parsed_data
    WHERE
        childRef ->> 'childEntityType' IN ('DEVICE', 'NODE_INFRA_PROVISIONING', 'SIGNALING_INTERFACE', 'SBC_INFRA_PROVISIONING', 'GATEWAY_SBC')
),
device_filtered AS (
    SELECT
        fd.enterpriseid,
        ca ->> 'specName' AS specName,
        ca ->> 'specValue' AS specValue,
        fd.childEntityAttributes
    FROM
        filtered_data fd,
        LATERAL jsonb_array_elements(fd.childEntityAttributes -> 'attributes') ca
    WHERE
        ca ->> 'specName' = 'DEVICE_ID'
        AND ca ->> 'specValue' = '44'
)
SELECT DISTINCT
    df.enterpriseid,
    ca1 ->> 'specValue' AS DeviceID,
    ca2 ->> 'specValue' AS LocationID,
    ca3 ->> 'specValue' AS RealDeviceType,
    ca4 ->> 'specValue' AS CPECharacteristic,
    ca5 ->> 'specValue' AS CustomerSignalingSubnet,
    ca6 ->> 'specValue' AS CustomerSignalingVLAN,
    ca7 ->> 'specValue' AS CustomerMediaVLAN,
    ca8 ->> 'specValue' AS IP_Version,
    ca9 ->> 'specValue' AS DnsPriority,
    ca10 ->> 'specValue' AS CarrierSignalingFqdn,
    ca101 ->> 'specValue' AS CustomerSignalingBaseIP,
    ca102 ->> 'specValue' AS SbcIndex
FROM
    device_filtered df,
    LATERAL jsonb_array_elements(df.childEntityAttributes -> 'attributes') ca1,
    LATERAL jsonb_array_elements(df.childEntityAttributes -> 'attributes') ca2,
    LATERAL jsonb_array_elements(df.childEntityAttributes -> 'attributes') ca3,
    LATERAL jsonb_array_elements(df.childEntityAttributes -> 'attributes') ca4,
    LATERAL jsonb_array_elements(df.childEntityAttributes -> 'attributes') ca5,
    LATERAL jsonb_array_elements(df.childEntityAttributes -> 'attributes') ca6,
    LATERAL jsonb_array_elements(df.childEntityAttributes -> 'attributes') ca7,
    LATERAL jsonb_array_elements(df.childEntityAttributes -> 'attributes') ca8,
    LATERAL jsonb_array_elements(df.childEntityAttributes -> 'attributes') ca9,
    LATERAL jsonb_array_elements(df.childEntityAttributes -> 'attributes') ca10,
    LATERAL jsonb_array_elements(df.childEntityAttributes -> 'attributes') ca101,
    LATERAL jsonb_array_elements(df.childEntityAttributes -> 'attributes') ca102
WHERE
    ca1 ->> 'specName' = 'DEVICE_ID'
    AND ca2 ->> 'specName' = 'LOCATION_ID'
    AND ca3 ->> 'specName' = 'DEVICE_TYPE'
    AND ca4 ->> 'specName' = 'CPE_CHARACTERISTIC'
    AND ca5 ->> 'specName' = 'CUSTOMER_SIGNALING_SUBNET'
    AND ca6 ->> 'specName' = 'CUSTOMER_SIGNALING_VLAN'
    AND ca7 ->> 'specName' = 'CUSTOMER_MEDIA_VLAN'
    AND ca8 ->> 'specName' = 'IP_VERSION'
    AND ca9 ->> 'specName' = 'DNS_PRIORITY'
    AND ca10 ->> 'specName' = 'SIGNALING_FQDN'
    AND ca101 ->> 'specName' = 'CUSTOMER_SIGNALING_BASE_IP'
    AND ca102 ->> 'specName' = 'SBC_INDEX'
    AND (
        (df.specName = 'ROUTER_TYPE' AND df.specValue = 'Type1')
        OR
        (df.specName = 'SWITCH_TYPE' AND df.specValue = 'Type2')
        OR
        (df.specName = 'CARRIER' AND df.specValue = 'Carrier1')
        OR
        (df.specName = 'SIGNALING_GROUP' AND df.specValue = 'Group1')
    );
