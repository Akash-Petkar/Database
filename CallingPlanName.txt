org.mockito.exceptions.misusing.UnfinishedStubbingException: 
Unfinished stubbing detected here:
-> at com.verizon.connect.ordng.translation.change.util.ModifyCallingOrderEvaluationServiceUtilTest.testSetCallingPlanName_WithLocationId_ShouldReturnUpdatedJson(ModifyCallingOrderEvaluationServiceUtilTest.java:409)

E.g. thenReturn() may be missing.
Examples of correct stubbing:
    when(mock.isOk()).thenReturn(true);
    when(mock.isOk()).thenThrow(exception);
    doThrow(exception).when(mock).someVoidMethod();
Hints:
 1. missing thenReturn()
 2. you are trying to stub a final method, which is not supported
 3. you are stubbing the behaviour of another mock inside before 'thenReturn' instruction is completed
===================================================================
import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;
import org.json.JSONObject;
import org.json.JSONArray;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpMethod;
import org.springframework.http.ResponseEntity;
import org.springframework.core.ParameterizedTypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.node.ObjectNode;
import java.util.*;

class MyServiceTest {

    @InjectMocks
    private MyService myService;

    @Mock
    private RestTemplate restTemplate;

    @Mock
    private ObjectMapper objectMapper;

    private static final String SAMPLE_JSON = "{ \"serviceOrder\": { \"services\": { \"commonSpecifications\": { \"specification\": [ { \"code\": \"API_NAME\", \"value\": \"modifyCallingPlan\" } ] }, \"serviceOrderHeader\": { \"originatingSystem\": \"CSSOP\" } } } }";
    private static final String SAMPLE_CONVERGED_SERVICE_JSON = "{ \"serviceOrder\": { \"services\": { \"convergedService\": { \"serviceCapability\": [ { \"specification\": [ { \"code\": \"locationId\", \"value\": \"123\" } ] } ] } } } }";

    @BeforeEach
    void setUp() {
        MockitoAnnotations.initMocks(this);
    }

    @Test
    void testCheckModifyCallingPlan_ModifyCallingPlanAndCSSOP_ShouldReturnTrue() {
        assertTrue(myService.checkModifyCallingPlan(SAMPLE_JSON));
    }

    @Test
    void testCheckModifyCallingPlan_InvalidApiName_ShouldReturnFalse() {
        String jsonData = SAMPLE_JSON.replace("modifyCallingPlan", "otherApi");
        assertFalse(myService.checkModifyCallingPlan(jsonData));
    }

    @Test
    void testCheckModifyCallingPlan_InvalidSourceSystem_ShouldReturnFalse() {
        String jsonData = SAMPLE_JSON.replace("CSSOP", "OTHER_SYSTEM");
        assertFalse(myService.checkModifyCallingPlan(jsonData));
    }

    @Test
    void testSetCallingPlanName_WithLocationId_ShouldReturnUpdatedJson() throws Exception {
        when(restTemplate.exchange(anyString(), eq(HttpMethod.POST), any(HttpEntity.class), any(ParameterizedTypeReference.class)))
                .thenReturn(ResponseEntity.ok(getMockResponse()));

        when(objectMapper.readTree(anyString())).thenReturn(objectMapper.readTree(SAMPLE_CONVERGED_SERVICE_JSON));

        String result = myService.setCallingPlanName(SAMPLE_CONVERGED_SERVICE_JSON);

        assertTrue(result.contains("\"value\":\"mockCallingPlan\""));
    }

    @Test
    void testSetCallingPlanName_NoLocationId_ShouldReturnOriginalJson() {
        String jsonData = SAMPLE_CONVERGED_SERVICE_JSON.replace("\"locationId\"", "\"otherId\"");
        assertEquals(jsonData, myService.setCallingPlanName(jsonData));
    }

    @Test
    void testExtractLocationId_FoundLocationId_ShouldReturnLocationId() {
        String result = myService.extractLocationId(new JSONObject(SAMPLE_CONVERGED_SERVICE_JSON));
        assertEquals("123", result);
    }

    @Test
    void testExtractLocationId_NoLocationId_ShouldReturnNull() {
        String jsonData = SAMPLE_CONVERGED_SERVICE_JSON.replace("locationId", "otherId");
        assertNull(myService.extractLocationId(new JSONObject(jsonData)));
    }

    @Test
    void testGetCallingPlanName_FoundCallingPlanName_ShouldReturnName() {
        when(restTemplate.exchange(anyString(), eq(HttpMethod.POST), any(HttpEntity.class), any(ParameterizedTypeReference.class)))
                .thenReturn(ResponseEntity.ok(getMockResponse()));

        String result = myService.getCallingPlanName("123");
        assertEquals("mockCallingPlan", result);
    }

    @Test
    void testGetCallingPlanName_NoCallingPlanName_ShouldReturnNull() {
        when(restTemplate.exchange(anyString(), eq(HttpMethod.POST), any(HttpEntity.class), any(ParameterizedTypeReference.class)))
                .thenReturn(ResponseEntity.ok(Collections.emptyList()));

        String result = myService.getCallingPlanName("123");
        assertNull(result);
    }

    @Test
    void testGetData_SuccessfulRequest_ShouldReturnResponseList() {
        when(restTemplate.exchange(anyString(), eq(HttpMethod.POST), any(HttpEntity.class), any(ParameterizedTypeReference.class)))
                .thenReturn(ResponseEntity.ok(getMockResponse()));

        List<GenericDataBaseResponseDTO> response = myService.getData(new ArrayList<>());
        assertEquals(1, response.size());
    }

    @Test
    void testGetData_RequestFailure_ShouldReturnEmptyList() {
        when(restTemplate.exchange(anyString(), eq(HttpMethod.POST), any(HttpEntity.class), any(ParameterizedTypeReference.class)))
                .thenThrow(new RuntimeException("Test Exception"));

        List<GenericDataBaseResponseDTO> response = myService.getData(new ArrayList<>());
        assertTrue(response.isEmpty());
    }

    @Test
    void testSetCallingPlanNameForLocation_ValidData_ShouldUpdateJson() throws Exception {
        when(objectMapper.readTree(anyString())).thenReturn(objectMapper.readTree(SAMPLE_CONVERGED_SERVICE_JSON));

        String result = myService.setCallingPlanNameForLocation("mockCallingPlan", SAMPLE_CONVERGED_SERVICE_JSON);
        assertTrue(result.contains("\"value\":\"mockCallingPlan\""));
    }

    @Test
    void testSetCallingPlanNameForLocation_NullCallingPlan_ShouldReturnOriginalJson() throws Exception {
        String result = myService.setCallingPlanNameForLocation(null, SAMPLE_CONVERGED_SERVICE_JSON);
        assertEquals(SAMPLE_CONVERGED_SERVICE_JSON, result);
    }

    private List<GenericDataBaseResponseDTO> getMockResponse() {
        GenericTableData tableData = new GenericTableData();
        tableData.setColumnName("CALLING_PLAN_NAME");
        tableData.setColumnValue("mockCallingPlan");

        List<GenericTableData> responseList = Collections.singletonList(tableData);
        List<List<GenericTableData>> dataList = Collections.singletonList(responseList);

        GenericDataBaseResponseDTO response = new GenericDataBaseResponseDTO();
        response.setDataList(dataList);

        return Collections.singletonList(response);
    }
}

==========================================================================================
public boolean checkModifyCallingPlan(String jsonData) {
    JSONObject jsonObject = new JSONObject(jsonData);

    JSONArray specifications = jsonObject.getJSONObject("serviceOrder")
                                         .getJSONObject("services")
                                         .getJSONObject("commonSpecifications")
                                         .getJSONArray("specification");

    String apiName = null;
    for (Object obj : specifications) {
        JSONObject spec = (JSONObject) obj;
        if ("API_NAME".equals(spec.optString("code"))) {
            apiName = spec.optString("value");
            break;
        }
    }

    String sourceSystem = jsonObject.getJSONObject("serviceOrder")
                                    .getJSONObject("serviceOrderHeader")
                                    .optString("originatingSystem");

    return "modifyCallingPlan".equals(apiName) && "CSSOP".equals(sourceSystem);
}

public String setCallingPlanName(String jsonData) {
    JSONObject jsonObject = new JSONObject(jsonData);
    String locationId = extractLocationId(jsonObject);

    if (locationId == null) return jsonData;  // If no locationId, return original data

    String callingPlanName = getCallingPlanName(locationId);
    return setCallingPlanNameForLocation(callingPlanName, jsonData);
}

private String extractLocationId(JSONObject jsonObject) {
    JSONArray serviceCapabilities = jsonObject.getJSONObject("serviceOrder")
                                              .getJSONObject("services")
                                              .getJSONObject("convergedService")
                                              .optJSONArray("serviceCapability");

    if (serviceCapabilities == null) return null;

    for (Object obj : serviceCapabilities) {
        JSONArray specifications = ((JSONObject) obj).optJSONArray("specification");
        if (specifications == null) continue;

        for (Object specObj : specifications) {
            JSONObject spec = (JSONObject) specObj;
            if ("locationId".equals(spec.optString("code"))) {
                return spec.optString("value");
            }
        }
    }
    return null;
}

public String getCallingPlanName(String locationId) {
    List<GenericDataBaseRequestDTO> requestList = new ArrayList<>();
    GenericDataBaseRequestDTO request = new GenericDataBaseRequestDTO();
    request.setSqlKey("GET_CALLING_PLAN_NAME_FOR_CSSOP");
    request.setSourceService("CSSOP");
    request.setColumnValues(new String[] { locationId });

    requestList.add(request);
    List<GenericDataBaseResponseDTO> responses = getData(requestList);

    for (GenericDataBaseResponseDTO response : responses) {
        for (List<GenericTableData> dataList : response.getDataList()) {
            for (GenericTableData data : dataList) {
                if ("CALLING_PLAN_NAME".equals(data.getColumnName())) {
                    return data.getColumnValue();
                }
            }
        }
    }
    return null;  // Return null if no calling plan name is found
}

public List<GenericDataBaseResponseDTO> getData(List<GenericDataBaseRequestDTO> requestList) {
    try {
        HttpEntity<List<GenericDataBaseRequestDTO>> requestEntity = new HttpEntity<>(requestList, new HttpHeaders());
        ResponseEntity<List<GenericDataBaseResponseDTO>> responseEntity = restTemplate.exchange(
                svcInvReadUrl, HttpMethod.POST, requestEntity,
                new ParameterizedTypeReference<List<GenericDataBaseResponseDTO>>() {});

        return responseEntity.getBody();
    } catch (Exception e) {
        LOG.error(ERROR, e.getMessage());
        return Collections.emptyList();  // Return an empty list in case of failure
    }
}

public String setCallingPlanNameForLocation(String callingPlanName, String jsonData) {
    if (callingPlanName == null) return jsonData;  // If no callingPlanName, return original data

    ObjectMapper mapper = new ObjectMapper();
    try {
        JsonNode rootNode = mapper.readTree(jsonData);
        ArrayNode specificationArray = (ArrayNode) rootNode.path("serviceOrder")
                                                           .path("services")
                                                           .path("convergedService")
                                                           .path("serviceCapability")
                                                           .get(0)
                                                           .path("specification");

        for (JsonNode specNode : specificationArray) {
            if ("callingPlanName".equals(specNode.path("code").asText())) {
                ((ObjectNode) specNode).put("value", callingPlanName);
                break;
            }
        }
        return mapper.writeValueAsString(rootNode);
    } catch (JsonProcessingException e) {
        e.printStackTrace();
        return jsonData;  // Return original data in case of an error
    }
}

===========================================================================================================================
public boolean checkModifyCallingPlan(String jsonData) {
		 JSONObject jsonObject = new JSONObject(jsonData);
	        
	        String apiName = null;
	        JSONArray specifications = jsonObject.getJSONObject("serviceOrder")
	                                            .getJSONObject("services")
	                                            .getJSONObject("commonSpecifications")
	                                            .getJSONArray("specification");

	        for (int i = 0; i < specifications.length(); i++) {
	            JSONObject spec = specifications.getJSONObject(i);
	            if ("API_NAME".equals(spec.getString("code"))) {
	                apiName = spec.getString("value");
	                break;
	            }
	        }

	        String sourceSystem = jsonObject.getJSONObject("serviceOrder")
	                                        .getJSONObject("serviceOrderHeader")
	                                        .getString("originatingSystem");
	        
        if("modifyCallingPlan".equals(apiName) && "CSSOP".equals(sourceSystem)) {
		return true;}
        else {
        	return false;
        }
	}
	
	public String setCallingPlanName(String jsonData) {
		String columnValue=null;
		JSONObject jsonObject = new JSONObject(jsonData);
		String locationId = null;
        JSONArray serviceCapabilities = jsonObject.getJSONObject("serviceOrder")
                                                  .getJSONObject("services")
                                                  .getJSONObject("convergedService")
                                                  .getJSONArray("serviceCapability");

        for (int i = 0; i < serviceCapabilities.length(); i++) {
            JSONArray serviceSpecifications = serviceCapabilities.getJSONObject(i).getJSONArray("specification");
            for (int j = 0; j < serviceSpecifications.length(); j++) {
                JSONObject spec = serviceSpecifications.getJSONObject(j);
                if ("locationId".equals(spec.getString("code"))) {
                    locationId = spec.getString("value");
                    break;
                }
            }
        }
        
        String callingPlanName = getCallingPlanName(locationId,columnValue);
        String jsonData1 = setCallingPlanNameForLocation(callingPlanName,jsonData);
        return jsonData1;
	}
	
	public String getCallingPlanName(String locationId,String columnValue) {
		List<GenericDataBaseRequestDTO> requestList = new ArrayList<>();
		GenericDataBaseRequestDTO genericDataBaseRequestDTO = new GenericDataBaseRequestDTO();
		genericDataBaseRequestDTO.setSqlKey("GET_CALLING_PLAN_NAME_FOR_CSSOP");
		genericDataBaseRequestDTO.setSourceService("CSSOP");
		
		List<String> values = new ArrayList<>();
		values.add(locationId);
		
		String[] columnValues = values.toArray(new String[0]);
		genericDataBaseRequestDTO.setColumnValues(columnValues);
		
		requestList.add(genericDataBaseRequestDTO);
		
		List<GenericDataBaseResponseDTO> responseBody =getData(requestList);
		
		for(GenericDataBaseResponseDTO response:responseBody) {
			List<List<GenericTableData>> dataList = response.getDataList();
			for(List<GenericTableData> responseList:dataList) {
				for(GenericTableData finalResponse:responseList) {
					if("CALLING_PLAN_NAME".equals(finalResponse.getColumnName())) {
						columnValue = finalResponse.getColumnValue();
					}
				}
			}
		}		
		return columnValue;
	}
	
	public List<GenericDataBaseResponseDTO> getData(List<GenericDataBaseRequestDTO> requestList){
		List<GenericDataBaseResponseDTO> responseBody = null;
		try {
			HttpEntity<List<GenericDataBaseRequestDTO>> requestEntity = new HttpEntity<>(requestList,
					new HttpHeaders());
			ResponseEntity<List<GenericDataBaseResponseDTO>> genericDataBaseResponseDTORef = restTemplate.exchange(
					svcInvReadUrl, HttpMethod.POST, requestEntity,
					new ParameterizedTypeReference<List<GenericDataBaseResponseDTO>>() {
					});

			responseBody = genericDataBaseResponseDTORef.getBody();
		} catch (Exception e) {
			LOG.error(ERROR, e.getMessage());
		}
		
		return responseBody;
	}
	
	public String setCallingPlanNameForLocation(String callingPlanName,String jsonData) {
		ObjectMapper mapper = new ObjectMapper();
		try {
			JsonNode rootNode = mapper.readTree(jsonData);
			
			JsonNode specificationArray = rootNode.path("serviceOrder")
			        .path("services")
			        .path("convergedService")
			        .path("serviceCapability")
			        .get(0)
			        .path("specification");
			
			if(specificationArray.isArray()) {
				ArrayNode specsArrayNode = (ArrayNode) specificationArray;
				
             for(JsonNode specNode:specsArrayNode) {
            	 if(specNode.path("code").asText().equals("callingPlanName")) {
            		 ((ObjectNode) specNode).put("value", callingPlanName);
            		 break;
            	 }
             }								
			}
			return mapper.writeValueAsString(rootNode);
		} catch (JsonMappingException e) {
			e.printStackTrace();
		} catch (JsonProcessingException e) {
			e.printStackTrace();
		}
		
    	return jsonData;
	}
===============================================================================================================
public String setCallingPlanNameForLocation(String callingPlanName,String jsonData) {
		ObjectMapper mapper = new ObjectMapper();
		try {
			JsonNode rootNode = mapper.readTree(jsonData);
			
			JsonNode specificationArray = rootNode.path("serviceOrder")
			        .path("services")
			        .path("convergedService")
			        .path("serviceCapability")
			        .get(0)
			        .path("specification");
			
			if(specificationArray.isArray()) {
				ArrayNode specsArrayNode = (ArrayNode) specificationArray;
				
             for(JsonNode specNode:specsArrayNode) {
            	 if(specNode.path("code").asText().equals("callingPlanName")) {
            		 ((ObjectNode) specNode).put("value", callingPlanName);
            		 break;
            	 }
             }								
			}
		} catch (JsonMappingException e) {
			e.printStackTrace();
		} catch (JsonProcessingException e) {
			e.printStackTrace();
		}
		
    	return jsonData;
	}
=====================================================================
import org.json.JSONArray;
import org.json.JSONObject;

public class JsonDataExtractor {
    public static void main(String[] args) {
        String jsonData = "<YOUR_JSON_STRING_HERE>";  // Replace with your JSON data string.

        JSONObject jsonObject = new JSONObject(jsonData);
        
        // Fetching API_NAME
        String apiName = null;
        JSONArray specifications = jsonObject.getJSONObject("serviceOrder")
                                            .getJSONObject("services")
                                            .getJSONObject("commonSpecifications")
                                            .getJSONArray("specification");

        for (int i = 0; i < specifications.length(); i++) {
            JSONObject spec = specifications.getJSONObject(i);
            if ("API_NAME".equals(spec.getString("code"))) {
                apiName = spec.getString("value");
                break;
            }
        }

        // Fetching SourceSystem
        String sourceSystem = jsonObject.getJSONObject("serviceOrder")
                                        .getJSONObject("serviceOrderHeader")
                                        .getString("originatingSystem");

        // Fetching locationId
        String locationId = null;
        JSONArray serviceCapabilities = jsonObject.getJSONObject("serviceOrder")
                                                  .getJSONObject("services")
                                                  .getJSONObject("convergedService")
                                                  .getJSONArray("serviceCapability");

        for (int i = 0; i < serviceCapabilities.length(); i++) {
            JSONArray serviceSpecifications = serviceCapabilities.getJSONObject(i).getJSONArray("specification");
            for (int j = 0; j < serviceSpecifications.length(); j++) {
                JSONObject spec = serviceSpecifications.getJSONObject(j);
                if ("locationId".equals(spec.getString("code"))) {
                    locationId = spec.getString("value");
                    break;
                }
            }
        }

        // Print the extracted values
        System.out.println("API Name: " + apiName);
        System.out.println("Source System: " + sourceSystem);
        System.out.println("Location ID: " + locationId);
    }
}

=========================================================================
{
	"serviceOrder": {
		"serviceOrderHeader": {
			"flow": "VRD-TSO",
			"supp": false,
			"suppField": false,
			"region": "US",
			"product": "VOIP",
			"orderType": "CHANGE",
			"serviceType": "IP Integrated Access",
			"functionCode": "RELEASE",
			"lineOfBusiness": "RETAIL_VOIP",
			"workOrderNumber": "MCP_11_SEP_12",
			"workOrderVersion": "0",
			"originatingSystem": "CSSOP",
			"userContact": {
				"id": "CSSOP",
				"firstName": "CSSOP",
				"lastName": "CSSOP"
			}
		},
		"services": {
			"commonSpecifications": {
				"specification": [
					{
						"code": "API_NAME",
						"value": "modifyCallingPlan"
					},
					{
						"code": "REQUEST_ID",
						"value": "259eb923-d3a7-48ae-95e5-236566a11e56"
					},
					{
						"code": "SummaryContextID",
						"value": ""
					}
				]
			},
			"convergedService": {
				"serviceCapability": [
					{
						"entityType": "LOCATION",
						"actionCode": "CHANGE",
						"entityTypeId": "0",
						"specification": [
							{
								"code": "createdBy",
								"value": "1443950427"
							},
							{
								"code": "createdDate",
								"value": "2023-08-31T07:10:47.667Z"
							},
							{
								"code": "updatedBy",
								"value": "1443950427"
							},
							{
								"code": "updatedDate",
								"value": "2023-08-31T07:10:47.667Z"
							},
							{
								"code": "departmentId",
								"value": ""
							},
							{
								"code": "locationId",
								"value": "672847"
							},
							{
								"code": "callingPlanId",
								"value": "1"
							},
							{
								"code": "callingPlanName",
								"value": ""
							},
							{
								"code": "iIntraLocation",
								"value": "1"
							},
							{
								"code": "iInterLocation",
								"value": "1"
							},
							{
								"code": "iCollectCalls",
								"value": "1"
							},
							{
								"code": "oIntraLocation",
								"value": "0"
							},
							{
								"code": "oLocal",
								"value": "1"
							},
							{
								"code": "oTollFree",
								"value": "1"
							},
							{
								"code": "oToll",
								"value": "0"
							},
							{
								"code": "oInternational",
								"value": "1"
							},
							{
								"code": "oCasual",
								"value": "0"
							},
							{
								"code": "oOperatorAssisted",
								"value": "1"
							},
							{
								"code": "oChargedDirAssist",
								"value": "1"
							},
							{
								"code": "oSplServices1",
								"value": "0"
							},
							{
								"code": "oSplServices2",
								"value": "1"
							},
							{
								"code": "oPrmServices1",
								"value": "0"
							},
							{
								"code": "oPrmServices2",
								"value": "0"
							},
							{
								"code": "oUrlDialing",
								"value": "3"
							},
							{
								"code": "oUnknown",
								"value": "1"
							},
							{
								"code": "fIntraLocation",
								"value": "0"
							},
							{
								"code": "fLocal",
								"value": "1"
							},
							{
								"code": "fTollFree",
								"value": "1"
							},
							{
								"code": "fToll",
								"value": "1"
							},
							{
								"code": "fInternational",
								"value": "1"
							},
							{
								"code": "fCasual",
								"value": "0"
							},
							{
								"code": "fOperatorAssisted",
								"value": "1"
							},
							{
								"code": "fChargedDirAssist",
								"value": "1"
							},
							{
								"code": "fSplServices1",
								"value": "0"
							},
							{
								"code": "fSplServices2",
								"value": "1"
							},
							{
								"code": "fPrmServices1",
								"value": "1"
							},
							{
								"code": "fPrmServices2",
								"value": "0"
							},
							{
								"code": "fUrlDialing",
								"value": "1"
							},
							{
								"code": "fUnknown",
								"value": "0"
							},
							{
								"code": "bInterLocation",
								"value": "1"
							},
							{
								"code": "active",
								"value": "1"
							},
							{
								"code": "tn1",
								"value": "50012725382"
							},
							{
								"code": "tn2",
								"value": "50025427181"
							},
							{
								"code": "tn3",
								"value": "50032536276"
							},
							{
								"code": "idigitString112211221122",
								"value": "0"
							},
							{
								"code": "odigitString112211221122",
								"value": "0"
							},
							{
								"code": "fdigitString112211221122",
								"value": "1"
							},
							{
								"code": "bdigitString112211221122",
								"value": "1"
							},
							{
								"code": "digitString",
								"value": "112211221122"
							}
						]
					}
				]
			}
		}
	}
}
