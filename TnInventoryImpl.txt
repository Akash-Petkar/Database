
package com.verizon.connect.svcinv.business.dataservice.controller;

import javax.validation.Valid;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.verizon.connect.infrastructure.exception.handler.AppException;
import com.verizon.connect.svcinv.business.dataservice.dto.DomainACKResponse;
import com.verizon.connect.svcinv.business.dataservice.dto.ExternalInterfaceResponse;
import com.verizon.connect.svcinv.business.dataservice.dto.ServiceInventoryBussinessDto;
import com.verizon.connect.svcinv.business.dataservice.dto.TnInventoryReportRequest;

import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;
import io.swagger.annotations.ApiResponse;
import io.swagger.annotations.ApiResponses;

@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCustomCodegen", date = "2019-06-20T11:47:01.810+05:30")

public interface TnInventoryReportApi {

	@ApiOperation(value = "get TNINV Report", notes = "get TNINV Report", response = Object.class, tags = {
			"svcinvExternalInterfaceRequest", })
	@ApiResponses(value = { @ApiResponse(code = 200, message = "Success", response = Object.class),
			@ApiResponse(code = 400, message = "Bad Input Parameter", response = Object.class) })
	@RequestMapping(value = "/getTnInvReportApi",produces = { "application/optet" }, method = RequestMethod.POST)
	default ResponseEntity<DomainACKResponse> getTnInvReport(
			@ApiParam(value = "getTnInvReportApi", required = true) @Valid @RequestBody ServiceInventoryBussinessDto body)
			throws AppException, JsonProcessingException {
		
		return new ResponseEntity<>(HttpStatus.OK);
	}
}
==============================================================
package com.verizon.connect.svcinv.business.dataservice.controller;

import static com.verizon.connect.svcinv.business.dataservice.constants.ServiceResponseConstants.CONN_SVCINV_NE_100;
import static com.verizon.connect.svcinv.business.dataservice.constants.ServiceResponseConstants.CONN_SVCINV_NE_100_DES;

import javax.validation.Valid;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.verizon.connect.infrastructure.exception.handler.AppException;
import com.verizon.connect.infrastructure.util.InfrastructureCommonUtil;
import com.verizon.connect.svcinv.business.dataservice.dto.DomainACKResponse;
import com.verizon.connect.svcinv.business.dataservice.dto.ExternalInterfaceResponse;
import com.verizon.connect.svcinv.business.dataservice.dto.ResponseDetails;
import com.verizon.connect.svcinv.business.dataservice.dto.ServiceInventoryBussinessDto;
import com.verizon.connect.svcinv.business.dataservice.dto.TnInventoryReportRequest;
import com.verizon.connect.svcinv.business.dataservice.services.TnInventoryReportService;

import io.swagger.annotations.ApiParam;

@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCustomCodegen", date = "2019-06-18T11:52:35.592+05:30")

@RestController
@Validated
@CrossOrigin
public class TnInventoryReportApiRestController implements TnInventoryReportApi{

	private static final Logger log = LoggerFactory.getLogger(TnInventoryReportApiRestController.class);
	
	@Autowired
	private TnInventoryReportService  tnInventoryReportService;
	
	@Override
	public ResponseEntity<DomainACKResponse> getTnInvReport(@ApiParam(value = "getTnInvReportApi", required = true) @Valid @RequestBody ServiceInventoryBussinessDto serviceInventoryBussinessDto)
			throws AppException, JsonProcessingException{
		
		log.info("Entered SvcinvWriteDatabaseApiRestController.getTnInvReport()");
		
		DomainACKResponse domainACKResponse = new DomainACKResponse();
		ResponseDetails ackResponse = new ResponseDetails();
		ackResponse.setStatusCode(CONN_SVCINV_NE_100);
		ackResponse.setStatusDescription(CONN_SVCINV_NE_100_DES);
		domainACKResponse.setAckResponse(ackResponse);
		
		log.info("Acknowledged getTnInvReport request : {}", InfrastructureCommonUtil.convertToJSON(serviceInventoryBussinessDto));

		 tnInventoryReportService.getTnInvReport(serviceInventoryBussinessDto);
		 
		 log.info("Extited TnInventoryReportApiRestController.getTnInvReport(.....)");
		
		return new ResponseEntity<>(domainACKResponse, HttpStatus.OK);
		
	}
}

======================================================
import javax.validation.Valid;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.verizon.connect.infrastructure.exception.handler.AppException;
import com.verizon.connect.svcinv.business.dataservice.dto.CacheRefreshRespDto;
import com.verizon.connect.svcinv.business.dataservice.dto.DomainACKResponse;
import com.verizon.connect.svcinv.business.dataservice.dto.ExternalInterfaceRequest;
import com.verizon.connect.svcinv.business.dataservice.dto.ExternalInterfaceResponse;
import com.verizon.connect.svcinv.business.dataservice.dto.ServiceInventoryBussinessDto;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;
import io.swagger.annotations.ApiResponse;
import io.swagger.annotations.ApiResponses;

@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCustomCodegen", date = "2019-06-20T11:47:01.810+05:30")

@Api(value = "svcinv", description = "The service Inventory API")

public interface SvcinvBussinessServiceApi {

	@ApiOperation(value = "Add Servie Releted details to Service Inventory domain.", notes = "Add Servie Releted details to Service Inventory domain.", response = Object.class, tags = {
			"svcinv", })

	@ApiResponses(value = { @ApiResponse(code = 200, message = "Success", response = Object.class),
			@ApiResponse(code = 400, message = "Bad Input Parameter", response = Object.class) })

	@RequestMapping(value = "/service", produces = { "application/json" }, method = RequestMethod.POST)
	default ResponseEntity<DomainACKResponse> addSvcInv(
			@ApiParam(value = "Persist data to Service Inventory", required = true) @Valid @RequestBody ServiceInventoryBussinessDto body)
			throws AppException, JsonProcessingException {
		return new ResponseEntity<>(HttpStatus.OK);
	}
========================================================
import static com.verizon.connect.svcinv.business.dataservice.constants.ServiceResponseConstants.CONN_SVCINV_NE_100;
import static com.verizon.connect.svcinv.business.dataservice.constants.ServiceResponseConstants.CONN_SVCINV_NE_100_DES;
import static com.verizon.connect.svcinv.business.dataservice.constants.SvcinvBusinessServiceConstants.AGGREGATOR_ADD;
import static com.verizon.connect.svcinv.business.dataservice.constants.SvcinvBusinessServiceConstants.AGGREGATOR_DELETE;
import static com.verizon.connect.svcinv.business.dataservice.constants.SvcinvBusinessServiceConstants.AGGREGATOR_UPDATE;
import static com.verizon.connect.svcinv.business.dataservice.constants.SvcinvBusinessServiceConstants.GENERIC_INSTALL;
import static com.verizon.connect.svcinv.business.dataservice.constants.SvcinvBusinessServiceConstants.GENERIC_UPDATE;

import java.util.Map;

import javax.validation.Valid;

import org.json.JSONObject;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.slf4j.MDC;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.cloud.context.config.annotation.RefreshScope;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.verizon.connect.infrastructure.exception.handler.AppException;
import com.verizon.connect.infrastructure.util.InfrastructureCommonUtil;
import com.verizon.connect.svcinv.business.dataservice.aggregator.SvcinvBusinessServiceAggregator;
import com.verizon.connect.svcinv.business.dataservice.config.CacheMappingConfigFromDbOnStartUp;
import com.verizon.connect.svcinv.business.dataservice.dto.CacheRefreshRespDto;
import com.verizon.connect.svcinv.business.dataservice.dto.DomainACKResponse;
import com.verizon.connect.svcinv.business.dataservice.dto.ExternalInterfaceRequest;
import com.verizon.connect.svcinv.business.dataservice.dto.ExternalInterfaceResponse;
import com.verizon.connect.svcinv.business.dataservice.dto.ResponseDetails;
import com.verizon.connect.svcinv.business.dataservice.dto.ServiceInventoryBussinessDto;
import com.verizon.connect.svcinv.business.dataservice.services.SvcinvBusinessService;
import com.verizon.connect.svcinv.business.dataservice.util.ProcessServiceUtil;

import io.swagger.annotations.ApiParam;

@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCustomCodegen", date = "2019-06-18T11:52:35.592+05:30")

@RestController
@Validated
@CrossOrigin
public class SvcinvBussinessServiceApiRestController implements SvcinvBussinessServiceApi {

	private static final Logger log = LoggerFactory.getLogger(SvcinvBussinessServiceApiRestController.class);

	@Autowired
	private CacheMappingConfigFromDbOnStartUp cachedMappingConfigFromDbOnStartUp;

	@Autowired
	private SvcinvBusinessServiceAggregator svcinvBusinessServiceAggregator;
	
	@Autowired
	private SvcinvBusinessService svcinvBusinessService;

	/**
	 * @throws AppException
	 * @throws JsonProcessingException
	 * @see SvcinvBussinessServiceApi#addOrder
	 */
	@Override
	public ResponseEntity<DomainACKResponse> addSvcInv(
			@ApiParam(value = "Service Inventory related data to persist in Service Inventory domain", required = true) @Valid @RequestBody ServiceInventoryBussinessDto serviceInventoryBussinessDto)
			throws AppException, JsonProcessingException {

		log.info("Entered SvcinvBussinessServiceApiRestController.addSvcInv(.....)");

		Map<String, String> currentMdc = MDC.getCopyOfContextMap();
		DomainACKResponse domainACKResponse = new DomainACKResponse();
		ResponseDetails ackResponse = new ResponseDetails();
		ackResponse.setStatusCode(CONN_SVCINV_NE_100);
		ackResponse.setStatusDescription(CONN_SVCINV_NE_100_DES);
		domainACKResponse.setAckResponse(ackResponse);

		log.info("Acknowledged addSvcCInventory request : {}", InfrastructureCommonUtil.convertToJSON(serviceInventoryBussinessDto));
		svcinvBusinessServiceAggregator.processAndSendResponse(serviceInventoryBussinessDto, currentMdc,
				AGGREGATOR_ADD);
		log.info("Extited SvcinvBussinessServiceApiRestController.addSvcInv(.....)");
		MDC.clear();
		return new ResponseEntity<>(domainACKResponse, HttpStatus.OK);
	}
===============================================
{
  "ackResponse": {
    "statusCode": "CE200",
    "statusDescription": "Success"
  }
}
===================================================
<!doctype html><html lang="en"><head><title>HTTP Status 500 – Internal Server Error</title><style type="text/css">body {font-family:Tahoma,Arial,sans-serif;} h1, h2, h3, b {color:white;background-color:#525D76;} h1 {font-size:22px;} h2 {font-size:16px;} h3 {font-size:14px;} p {font-size:12px;} a {color:black;} .line {height:1px;background-color:#525D76;border:none;}</style></head><body><h1>HTTP Status 500 – Internal Server Error</h1></body></html>
=======================================================================================
SELECT *FROM ( SELECT location_id, location_name, tn, clid_first_name,TN_POOL_ID,clid_last_name,tn_status, TYPE, resourcetype, rownum rn FROM ( SELECT e.location_id,e.location_name,e.tn,nvl(nvl(e.clid_first_name, e.cid_first_name), '') AS clid_first_name, 
nvl(nvl(e.clid_last_name, e.cid_last_name), '') AS clid_last_name, 
DECODE(e.tn_status, 1, 'ASSIGNED', 2, 'AVAILABLE') AS tn_status,e.TN_POOL_ID, 
CASE WHEN iasa_sd.userid IS NOT NULL THEN 'PRIMARY' 
WHEN fc.event_type IS NOT NULL THEN 'ALTERNATE' ELSE 'UNK' END AS TYPE, CASE 
WHEN iasa_s.device_type IS NOT NULL THEN 'VMA' WHEN iasa_sd.userid IS NOT NULL 
AND iasa_sd.subid <> 0 THEN 'SUBSCRIBER' ELSE 'UNK' END AS resourcetype FROM ( 
SELECT p.tn, l.location_id, l.location_name, p.tn_status, p.TN_POOL_ID, 
et.clid_first_name, et.clid_last_name, tg.cid_first_name, tg.cid_last_name FROM 
tbl_enterprise@ESAP.WORLD e JOIN tbl_location@ESAP.WORLD l ON 
( e.enterprise_id = l.enterprise_id ) JOIN tbl_public_tn_pool@ESAP.WORLD p ON 
( p.location_id = l.location_id ) LEFT OUTER JOIN tbl_tso_et_tn@ESAP.WORLD et ON 
( et.tn_pool_id = p.tn_pool_id ) LEFT OUTER JOIN tbl_group_tn@ESAP.WORLD tg ON 
( tg.tn_pool_id = p.tn_pool_id ) WHERE e.enterprise_id = :ENTERPRISEID )e 
LEFT OUTER JOIN ( SELECT subid, userid FROM ipcom_subscriber_id WHERE 
natuserid = 1 ) iasa_sd ON ( e.tn = iasa_sd.userid ) LEFT OUTER JOIN ( SELECT 
device_type, subid FROM ipcom_subscriber WHERE device_type = 'VMA' ) iasa_s ON 
( iasa_s.subid = iasa_sd.subid ) LEFT OUTER JOIN ( SELECT event_type FROM 
ipcom_feature_change WHERE feature_id = 52 AND event_end IS NULL ) fc ON 
( fc.event_type = e.tn ) ORDER BY e.tn));
===============================================================================
select
	totaldata.rn,
	totaldata.tn,
	totaldata.location_id,
	totaldata.customer_id,
	totaldata.tn_status,
	totaldata.calling_line_id_first_name,
	totaldata.calling_line_id_last_name,
	totaldata.user_id,
	totaldata.subscriber_id,
	svi.entity_name,
	(
	select
	MAX(case when (data.specName = 'LOCATION_TYPE') then specValue else null end)
	from
	(
	  select
	     obj1->>'specName' specName,
		 obj1->>'specValue' specValue
	  from
		svcinv.t_service_inventory svm,
		jsonb_array_elements(svm.entity_attributes->'entityAttributes') obj1
	  where 
	    svm.entity_id=svi.entity_id
	  ) as data) as location_type,
	case 
		when user_id is not null then
	    'PRIMARY'
		     else 'UNK'
		   end as type,
	case 
		when user_id is not null and subscriber_id <> '0' then 'SUBSCRIBER'
		     else 'UNK'
		   end as resourcetype,
	case 
    	when svi.region = 'EMEA' then(
    	  select 
    	    max(case when (data.specName = 'PORTING_CODE') then specValue else null end)
    	  from (
    	    select 
    	       obj->> 'specName' as specName,
    	       obj->> 'specValue' as specValue
    	    from
    	       jsonb_array_elements(totaldata.tn_attributes->'attributeValue') obj
    	  ) as data
    	)
    	else null
    end as porting_code 
	from
		(
		select
		    row_number() over() as rn,
		    data.tn as tn,
		    data.location_id as location_id,
		    data.customer_id as customer_id,
		    data.tn_status as tn_status,
		    MAX(case when (data.specName = 'CALLING_LINE_ID_FIRST_NAME') then specValue else null end) as calling_line_id_first_name,
			MAX(case when (data.specName = 'CALLING_LINE_ID_LAST_NAME') then specValue else null end) as calling_line_id_last_name,
			MAX(case when (data.specName = 'USER_ID') then specValue else null end) as user_id,
			MAX(case when (data.specName = 'SUBSCRIBER_ID') then specValue else null end) as subscriber_id,
			data.tn_attributes
		from
			(
			select distinct 
			    tsi.tn as tn,
			    tsi.location_id as location_id,
			    tsi.customer_id as customer_id,
			    tsi.tn_status as tn_status,
				obj->>'specName' specName,
				obj->>'specValue' specValue,
				tsi.tn_attributes
			from
				 svcinv.v_tn_inventory tsi,
				jsonb_array_elements(tsi.tn_attributes->'attributeValue') obj
			where
				tsi.customer_id = '488124031'
		) as data
		group by
			tn,
		    location_id,
		    customer_id,
		   tn_status,
		   tn_attributes) as totaldata
		  left join svcinv.t_service_inventory svi
		    on totaldata.location_id = svi.entity_id
		    and 
		       svi.entity_type = 'LOCATION';
===================================================================
2024-09-12 06:09:03.560 ERROR c.v.c.o.t.s.ChangeOrderEvaluationServiceImpl.callEvaluateChangeOrderMethodUsingReflection(ChangeOrderEvaluationServiceImpl.java:1149) -POST|/ordng-translation-service/evaluateChangeOrder/order|d645d84b-601e-4680-b1d8-1cf95868122a|http-nio-8080-exec-5-482|MCP_12_SEP_1|0||1|ChangeEvaluate|connect-voip-provision:21442276:64910770|Error in callEvaluateChangeOrderMethodUsingReflection Unable to get Reflection Method for input: evaluateHandlerClassName-->com.verizon.connect.ordng.translation.webservices.CssopOrdersServiceImplevaluateHandlerMethodName-->modifyCallingPlanSourceSystem-->CSSOPworkOrderNumber-->MCP_12_SEP_1 java.lang.reflect.InvocationTargetException: null at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at java.lang.reflect.Method.invoke(Method.java:498) at com.verizon.connect.ordng.translation.services.ChangeOrderEvaluationServiceImpl.callEvaluateChangeOrderMethodUsingReflection(ChangeOrderEvaluationServiceImpl.java:1136) at com.verizon.connect.ordng.translation.services.ChangeOrderEvaluationServiceImpl.changeOrderEvaluationReflectionMethodCall(ChangeOrderEvaluationServiceImpl.java:1019) at com.verizon.connect.ordng.translation.services.ChangeOrderEvaluationServiceImpl.lambda$transformChangeEvaluatedOrder$43(ChangeOrderEvaluationServiceImpl.java:934) at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1384) at java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:647) at com.verizon.connect.ordng.translation.services.ChangeOrderEvaluationServiceImpl.transformChangeEvaluatedOrder(ChangeOrderEvaluationServiceImpl.java:877) at com.verizon.connect.ordng.translation.services.ChangeOrderEvaluationServiceImpl.processChangeEvaluatedOrder(ChangeOrderEvaluationServiceImpl.java:289) at com.verizon.connect.ordng.translation.services.ChangeOrderEvaluationServiceImpl.evaluateChangeOrder(ChangeOrderEvaluationServiceImpl.java:220) at com.verizon.connect.ordng.translation.aggregator.TranslateAndProcessAggregator.evaluateChangeOrderAndSendResponse(TranslateAndProcessAggregator.java:650) at com.verizon.connect.ordng.translation.aggregator.TranslateAndProcessAggregator$$FastClassBySpringCGLIB$$8a103607.invoke(<generated>) at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218) at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:771) at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163) at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749) at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88) at com.verizon.connect.infrastructure.logging.ResponseTimeTracker.trackElapsedTime(ResponseTimeTracker.java:46) at sun.reflect.GeneratedMethodAccessor325.invoke(Unknown Source) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at java.lang.reflect.Method.invoke(Method.java:498) at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644) at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633) at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70) at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175) at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749) at org.springframework.retry.annotation.AnnotationAwareRetryOperationsInterceptor.invoke(AnnotationAwareRetryOperationsInterceptor.java:156) at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749) at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:95) at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749) at org.springframework.aop.interceptor.AsyncExecutionInterceptor.lambda$invoke$0(AsyncExecutionInterceptor.java:115) at java.util.concurrent.FutureTask.run(FutureTask.java:266) at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) at java.lang.Thread.run(Thread.java:750) Caused by: java.lang.NullPointerException: null at com.verizon.connect.ordng.translation.change.util.ModifyCallingOrderEvaluationServiceUtil.lambda$addSpecToListSvcInvMatchNotFound$8(ModifyCallingOrderEvaluationServiceUtil.java:109) at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1384) at java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:647) at com.verizon.connect.ordng.translation.change.util.ModifyCallingOrderEvaluationServiceUtil.addSpecToListSvcInvMatchNotFound(ModifyCallingOrderEvaluationServiceUtil.java:107) at com.verizon.connect.ordng.translation.change.util.ModifyCallingOrderEvaluationServiceUtil.lambda$processLocationChildEntityDataSpecsChangeOrderForModifyCalling$5(ModifyCallingOrderEvaluationServiceUtil.java:75) at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:183) at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175) at java.util.HashMap$EntrySpliterator.forEachRemaining(HashMap.java:1723) at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:482) at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:472) at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:150) at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:173) at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234) at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:485) at com.verizon.connect.ordng.translation.change.util.ModifyCallingOrderEvaluationServiceUtil.processLocationChildEntityDataSpecsChangeOrderForModifyCalling(ModifyCallingOrderEvaluationServiceUtil.java:52) at com.verizon.connect.ordng.translation.change.util.ChangeOrderEvaluationServiceUtil.compareEntityOrderServiceInventoryAndCreateEntityOrderDetailChangeOrder(ChangeOrderEvaluationServiceUtil.java:778) at com.verizon.connect.ordng.translation.change.util.ChangeOrderEvaluationServiceUtil.processMultiplePriorityGroupsForET(ChangeOrderEvaluationServiceUtil.java:563) at com.verizon.connect.ordng.translation.change.util.ChangeOrderEvaluationServiceUtil.evaluateChangesServiceEntityOrderDataAndInventoryChangeOrder(ChangeOrderEvaluationServiceUtil.java:553) at com.verizon.connect.ordng.translation.services.ChangeOrderEvaluationServiceImpl.evaluateChangesFromInventoryChangeOrder(ChangeOrderEvaluationServiceImpl.java:1405) at com.verizon.connect.ordng.translation.webservices.CssopOrdersServiceImpl.modifyCallingPlan(CssopOrdersServiceImpl.java:350) ... 39 common frames omitted



============================================================
public static void processJsonArrayElements(JsonNode jsonNode, String resourceDirectory, String[] headerValue,
			Map<String, CSVWriter> csvWriters) {
		for (JsonNode arrayElement : jsonNode) {
			String locationId = getLocationId(arrayElement);
			CSVWriter csvWriter = csvWriters.computeIfAbsent(locationId, id -> {
				try {
					return createCsvWriter(resourceDirectory, id, headerValue);
				} catch (Exception e) {
					log.error(ERROR, e.getMessage());
				}
				return null;
			});

			if (csvWriter != null) {
				processArrayElement(arrayElement, csvWriter);
			} else {
				log.warn("CSVWriter is null for locationId: " + locationId);
			}
		}
	}
==================================================
import static org.mockito.Mockito.*;
import static org.junit.Assert.*;
import org.junit.Before;
import org.junit.Test;
import org.mockito.*;
import org.springframework.http.*;
import org.springframework.web.client.RestTemplate;
import java.util.*;

public class YourServiceTest {

    @InjectMocks
    private YourService yourService; // Replace with the actual class name

    @Mock
    private RestTemplate restTemplate;

    @Before
    public void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    public void testLoadApiData_Success() {
        // Setup
        GenericDataBaseResponseDTO responseDto = new GenericDataBaseResponseDTO();
        responseDto.setDataList(Collections.singletonList(
                Collections.singletonList(new GenericDataBaseColumnDTO("resourceDirectory:{\"resourceDirectory\":\"/path/to/dir\",\"header\":\"header1\"}"))));

        ResponseEntity<List<GenericDataBaseResponseDTO>> responseEntity = new ResponseEntity<>(
                Collections.singletonList(responseDto), HttpStatus.OK);

        when(restTemplate.exchange(anyString(), eq(HttpMethod.POST), any(HttpEntity.class),
                any(ParameterizedTypeReference.class)))
                .thenReturn(responseEntity);

        // Test
        ExternalInterfaceResponse response = yourService.loadApiData();

        // Verify
        assertNotNull(response);
        assertEquals("/path/to/dir", response.getRawBusinessResponse().get(0));
        assertArrayEquals(new String[]{"header1"}, (String[]) response.getRawBusinessResponse().get(1));
    }

    @Test
    public void testLoadApiData_EmptyResponseBody() {
        // Setup
        ResponseEntity<List<GenericDataBaseResponseDTO>> responseEntity = new ResponseEntity<>(Collections.emptyList(), HttpStatus.OK);

        when(restTemplate.exchange(anyString(), eq(HttpMethod.POST), any(HttpEntity.class),
                any(ParameterizedTypeReference.class)))
                .thenReturn(responseEntity);

        // Test
        ExternalInterfaceResponse response = yourService.loadApiData();

        // Verify
        assertNotNull(response);
        assertTrue(response.getRawBusinessResponse().isEmpty());
    }

    @Test
    public void testLoadApiData_ExceptionHandling() {
        // Setup
        ResponseEntity<List<GenericDataBaseResponseDTO>> responseEntity = new ResponseEntity<>(
                Collections.singletonList(new GenericDataBaseResponseDTO()), HttpStatus.OK);

        when(restTemplate.exchange(anyString(), eq(HttpMethod.POST), any(HttpEntity.class),
                any(ParameterizedTypeReference.class)))
                .thenReturn(responseEntity);

        // Test
        ExternalInterfaceResponse response = yourService.loadApiData();

        // Verify
        assertNotNull(response);
        assertTrue(response.getRawBusinessResponse().isEmpty());
    }
}

====================================================
public ExternalInterfaceResponse loadApiData() {
		log.info("<<<<<<------ Entered ExternalInterfaceResponse loadApiData() ------>>>>>>");

		ExternalInterfaceResponse externalInterfaceResponse = new ExternalInterfaceResponse();
		GenericDataBaseRequestDTO genericDataBaseRequestDTO = new GenericDataBaseRequestDTO();
		List<GenericDataBaseRequestDTO> requestList = new ArrayList<>();

		genericDataBaseRequestDTO.setSqlKey("GET_CSSOP_API_CONFIG");
		genericDataBaseRequestDTO.setSourceService("INFRA-INTERFACE-SERVICE");

		genericDataBaseRequestDTO.setColumnValues(new Object[] { "GET_TN_DETAILS_FOR_CSSOP" });
		requestList.add(genericDataBaseRequestDTO);

		HttpEntity<List<GenericDataBaseRequestDTO>> requestEntity = new HttpEntity<>(requestList, new HttpHeaders());
		ResponseEntity<List<GenericDataBaseResponseDTO>> genericDbResponse = restTemplate.exchange(configReadUrl,
				HttpMethod.POST, requestEntity, new ParameterizedTypeReference<List<GenericDataBaseResponseDTO>>() {
				});

		try {
			if (genericDbResponse.getBody() != null && !genericDbResponse.getBody().get(0).getDataList().isEmpty()) {
				String value1 = genericDbResponse.getBody().get(0).getDataList().get(0).get(0).getColumnValue();
				JSONObject jsonVal = new JSONObject(value1);

				String resourceDirectory = jsonVal.getString("resourceDirectory");
				String[] headers = { jsonVal.getString("header") };
				externalInterfaceResponse.setRawBusinessResponse(Arrays.asList(resourceDirectory, headers));
			}
		} catch (Exception e) {
			log.error(ERROR, e.getMessage());
		}

		log.info("<<<<<<------ Exited ExternalInterfaceResponse loadApiData() ------>>>>>>"
				+ externalInterfaceResponse.getRawBusinessResponse());
		return externalInterfaceResponse;
	}
=============================================
import static org.mockito.Mockito.*;
import static org.junit.Assert.*;
import org.junit.Before;
import org.junit.Test;
import org.mockito.*;
import com.fasterxml.jackson.databind.JsonNode;
import java.io.IOException;
import java.util.*;

public class JsonProcessorTest {

    @Mock
    private JsonNode jsonNode;

    @Mock
    private JsonNode arrayElement;

    @Mock
    private CSVWriter csvWriter;

    private Map<String, CSVWriter> csvWriters;

    @Before
    public void setUp() {
        MockitoAnnotations.openMocks(this);
        csvWriters = new HashMap<>();
    }

    @Test
    public void testProcessJsonArrayElements_Success() throws IOException {
        // Setup
        String[] headerValue = {"column1", "column2"};
        String locationId = "location1";

        when(jsonNode.iterator()).thenReturn(Collections.singletonList(arrayElement).iterator());
        when(arrayElement.path("locationId").asText()).thenReturn(locationId);
        when(JsonProcessor.getLocationId(arrayElement)).thenReturn(locationId);
        when(JsonProcessor.createCsvWriter(anyString(), eq(locationId), eq(headerValue))).thenReturn(csvWriter);

        // Test
        JsonProcessor.processJsonArrayElements(jsonNode, "resourceDir", headerValue, csvWriters);

        // Verify
        verify(csvWriter).writeNext(any(String[].class));
        assertTrue(csvWriters.containsKey(locationId));
    }

    @Test(expected = RuntimeException.class)
    public void testProcessJsonArrayElements_CSVWriterCreationFails() throws IOException {
        // Setup
        String[] headerValue = {"column1", "column2"};
        String locationId = "location1";

        when(jsonNode.iterator()).thenReturn(Collections.singletonList(arrayElement).iterator());
        when(JsonProcessor.getLocationId(arrayElement)).thenReturn(locationId);
        when(JsonProcessor.createCsvWriter(anyString(), eq(locationId), eq(headerValue)))
                .thenThrow(new IOException("Error creating CSVWriter"));

        // Test
        JsonProcessor.processJsonArrayElements(jsonNode, "resourceDir", headerValue, csvWriters);

        // The RuntimeException should be thrown, so the following verification won't be reached
        fail("Expected RuntimeException was not thrown.");
    }

    @Test
    public void testProcessJsonArrayElements_CSVWriterIsNull() throws IOException {
        // Setup
        String[] headerValue = {"column1", "column2"};
        String locationId = "location1";

        when(jsonNode.iterator()).thenReturn(Collections.singletonList(arrayElement).iterator());
        when(JsonProcessor.getLocationId(arrayElement)).thenReturn(locationId);
        when(JsonProcessor.createCsvWriter(anyString(), eq(locationId), eq(headerValue))).thenReturn(null);

        // Test
        JsonProcessor.processJsonArrayElements(jsonNode, "resourceDir", headerValue, csvWriters);

        // Verify
        assertFalse(csvWriters.containsKey(locationId));
    }

    // Add more test cases as needed for edge cases
}

===============================================
private static void processJsonArrayElements(JsonNode jsonNode, String resourceDirectory,
            String[] headerValue, Map<String, CSVWriter> csvWriters) throws IOException {
    for (JsonNode arrayElement : jsonNode) {
        String locationId = getLocationId(arrayElement);
        CSVWriter csvWriter = csvWriters.computeIfAbsent(locationId, id -> {
            try {
                return createCsvWriter(resourceDirectory, id, headerValue);
            } catch (IOException e) {
                log.error("Error creating CSVWriter for locationId: " + id, e);
                throw new RuntimeException(e);  // Propagate the exception to stop processing
            }
        });

        if (csvWriter != null) {
            processArrayElement(arrayElement, csvWriter);
        } else {
            log.warn("CSVWriter is null for locationId: " + locationId);
        }
    }
}

===================================================
 private static void processJsonArrayElements(JsonNode jsonNode, String resourceDirectory,
            String[] headerValue, Map<String, CSVWriter> csvWriters) throws IOException {
               for (JsonNode arrayElement : jsonNode) {
                 String locationId = getLocationId(arrayElement);
                 CSVWriter csvWriter = csvWriters.computeIfAbsent(locationId, id -> {
					try {
						return createCsvWriter(resourceDirectory, id, headerValue);
					} catch (IOException e) {
						e.printStackTrace();
					}
					return null;
				});
                   processArrayElement(arrayElement, csvWriter);
               }
             }
================================================
Updated Code
public static void processJson(JsonNode jsonNode, String resourceDirectory,
                                   ExternalInterfaceResponse response) {
    Map<String, CSVWriter> csvWriters = new HashMap<>();

    try {
        JSONObject jsonVal = new JSONObject(response);
        JSONArray rawDataArray = jsonVal.getJSONArray("rawBusinessResponse");
        JSONArray headerVal = rawDataArray.getJSONArray(1);
        String headerColumnValues = headerVal.getString(0);
        String[] headerValue = headerColumnValues.substring(1, headerColumnValues.length() - 1).split(",");

        processJsonArrayElements(jsonNode, resourceDirectory, headerValue, csvWriters);

    } catch (Exception e) {
        log.error(ERROR, e);
    } finally {
        closeCsvWriters(csvWriters);
    }
}

private static void processJsonArrayElements(JsonNode jsonNode, String resourceDirectory,
                                             String[] headerValue, Map<String, CSVWriter> csvWriters) throws IOException {
    for (JsonNode arrayElement : jsonNode) {
        String locationId = getLocationId(arrayElement);
        CSVWriter csvWriter = csvWriters.computeIfAbsent(locationId, id -> createCsvWriter(resourceDirectory, id, headerValue));
        processArrayElement(arrayElement, csvWriter);
    }
}

private static void closeCsvWriters(Map<String, CSVWriter> csvWriters) {
    for (CSVWriter writer : csvWriters.values()) {
        try {
            writer.close();
        } catch (IOException e) {
            log.error(ERROR, e);
        }
    }
}

===================================================
Sonar Issue
public static void processJson(JsonNode jsonNode, String resourceDirectory,
                                   ExternalInterfaceResponse response) {
    	Map<String, CSVWriter> csvWriters = new HashMap<>();
    	try {
    		JSONObject jsonVal = new JSONObject(response);
    		 JSONArray rawDataArray = jsonVal.getJSONArray("rawBusinessResponse");
    		 JSONArray headerVal = rawDataArray.getJSONArray(1);
    		 String headerColumnValues = headerVal.getString(0);
    		 String[] headerValue = headerColumnValues.substring(1, headerColumnValues.length() - 1).split(",");
    		 try {
    			 for(JsonNode arrayElement:jsonNode) {
        			 String locationId = getLocationId(arrayElement);
        			 if(!csvWriters.containsKey(locationId)) {
        				 CSVWriter csvWriter = createCsvWriter(resourceDirectory, locationId, headerValue);
        				 csvWriters.put(locationId, csvWriter);
        			 }
        			 processArrayElement(arrayElement, csvWriters.get(locationId));
        		 }
        		 
        		 for(CSVWriter writer : csvWriters.values()) {
        			 writer.close();
        		 }
			} catch (IOException e) {
				log.error(ERROR, e);
			}  		
		} catch (Exception e) {
			log.error(ERROR, e);
		}
    }
=============================================
Controller

@RestController
public class TnInventoryReportApiRestController implements TnInventoryReportApi{

	private static final Logger log = LoggerFactory.getLogger(TnInventoryReportApiRestController.class);
	
	@Autowired
	private TnInventoryReportService  tnInventoryReportService;
	
	@Override
	public ResponseEntity<ExternalInterfaceResponse> getTnInvReport(@ApiParam(value = "getTnInvReportApi", required = true) @Valid @RequestBody TnInventoryReportRequest externalInterfaceRequest)
			throws AppException, JsonProcessingException{
		
		log.info("Entered SvcinvWriteDatabaseApiRestController.getTnInvReport()");

		ExternalInterfaceResponse externalInterfaceResponse = tnInventoryReportService.getTnInvReport(externalInterfaceRequest);
		
		return new ResponseEntity<>(externalInterfaceResponse,HttpStatus.OK);
		
	}
}

============================================================================================
Junit Code coverage
package com.verizon.connect.svcinv.business.dataservice.services;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

import java.io.File;
import java.nio.file.Files;
import java.nio.file.Path;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Arrays;
import java.util.List;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.io.TempDir;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.ResponseEntity;
import org.springframework.web.client.RestTemplate;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.verizon.connect.svcinv.business.dataservice.dto.ExternalInterfaceResponse;
import com.verizon.connect.svcinv.business.dataservice.dto.TnInventoryReportRequest;
import com.verizon.infrastructure.connect.genericdatabase.dto.GenericDataBaseRequestDTO;
import com.verizon.infrastructure.connect.genericdatabase.dto.GenericDataBaseResponseDTO;

public class TnInventoryReportServiceImplTest {

    @Mock
    private RestTemplate restTemplate;

    @InjectMocks
    private TnInventoryReportServiceImpl service;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    void testGetTnInvReport_EnterpriseId() {
        TnInventoryReportRequest request = new TnInventoryReportRequest();
        request.setEnterpriseId("Enterprise123");
        
        // Mock the response
        ExternalInterfaceResponse mockResponse = new ExternalInterfaceResponse();
        mockResponse.setRawBusinessResponse(Arrays.asList("path/to/resourceDirectory", new String[] {"header"}));
        when(service.loadApiData()).thenReturn(mockResponse);

        // Mock the REST call
        ResponseEntity<List<GenericDataBaseResponseDTO>> mockDbResponse = mock(ResponseEntity.class);
        when(mockDbResponse.getBody()).thenReturn(Arrays.asList(createMockDatabaseResponse()));
        when(restTemplate.exchange(anyString(), any(HttpMethod.class), any(HttpEntity.class), any(ParameterizedTypeReference.class)))
                .thenReturn(mockDbResponse);

        ExternalInterfaceResponse response = service.getTnInvReport(request);

        assertNotNull(response);
        assertEquals("0", response.getStatusCode());
        assertEquals("Success", response.getStatusDescription());
        assertNotNull(response.getRawBusinessResponse());
    }

    @Test
    void testGetTnInvReport_LocationId() {
        TnInventoryReportRequest request = new TnInventoryReportRequest();
        request.setLocationId(Arrays.asList("Location123"));
        
        // Mock the response
        ExternalInterfaceResponse mockResponse = new ExternalInterfaceResponse();
        mockResponse.setRawBusinessResponse(Arrays.asList("path/to/resourceDirectory", new String[] {"header"}));
        when(service.loadApiData()).thenReturn(mockResponse);

        // Mock the REST call
        ResponseEntity<List<GenericDataBaseResponseDTO>> mockDbResponse = mock(ResponseEntity.class);
        when(mockDbResponse.getBody()).thenReturn(Arrays.asList(createMockDatabaseResponse()));
        when(restTemplate.exchange(anyString(), any(HttpMethod.class), any(HttpEntity.class), any(ParameterizedTypeReference.class)))
                .thenReturn(mockDbResponse);

        ExternalInterfaceResponse response = service.getTnInvReport(request);

        assertNotNull(response);
        assertEquals("0", response.getStatusCode());
        assertEquals("Success", response.getStatusDescription());
        assertNotNull(response.getRawBusinessResponse());
    }

    @Test
    void testIsNonEmpty_String() {
        assertTrue(service.isNonEmpty("Test"));
        assertFalse(service.isNonEmpty(""));
        assertFalse(service.isNonEmpty(null));
    }

    @Test
    void testIsNonEmpty_List() {
        assertTrue(service.isNonEmpty(Arrays.asList("Test")));
        assertFalse(service.isNonEmpty(Arrays.asList()));
        assertFalse(service.isNonEmpty(null));
    }

    @Test
    void testGenerateDatabaseRequest() {
        TnInventoryReportRequest request = new TnInventoryReportRequest();
        request.setSource("CSSOP");

        List<GenericDataBaseRequestDTO> requestList = new ArrayList<>();
        service.generateDatabaseRequest(requestList, request, "GET_TN_DETAILS_FOR_CSSOP", Arrays.asList("Enterprise123"));

        assertEquals(1, requestList.size());
        assertEquals("CSSOP", requestList.get(0).getSourceService());
        assertArrayEquals(new String[] {"Enterprise123"}, requestList.get(0).getColumnValues());
    }

    @Test
    void testProcessDatabaseResponse(@TempDir Path tempDir) throws Exception {
        TnInventoryReportRequest request = new TnInventoryReportRequest();
        ExternalInterfaceResponse response = new ExternalInterfaceResponse();
        response.setRawBusinessResponse(Arrays.asList(tempDir.toString(), new String[] {"header1,header2,header3"}));

        List<GenericDataBaseResponseDTO> responseBody = Arrays.asList(createMockDatabaseResponse());

        service.processDatabaseResponse(responseBody, tempDir.toString(), request, response);

        assertTrue(Files.exists(tempDir.resolve("Location123_" + LocalDateTime.now().format(DateTimeFormatter.ofPattern("yyyy-MM-dd_HH-mm-ss")) + ".csv")));
    }

    private GenericDataBaseResponseDTO createMockDatabaseResponse() {
        GenericDataBaseResponseDTO responseDTO = new GenericDataBaseResponseDTO();
        // Mock dataList as needed for your tests
        return responseDTO;
    }

    @Test
    void testLoadApiData() {
        // Mocking external data for loadApiData method
        ResponseEntity<List<GenericDataBaseResponseDTO>> mockDbResponse = mock(ResponseEntity.class);
        when(mockDbResponse.getBody()).thenReturn(Arrays.asList(createMockDatabaseResponse()));
        when(restTemplate.exchange(anyString(), any(HttpMethod.class), any(HttpEntity.class), any(ParameterizedTypeReference.class)))
                .thenReturn(mockDbResponse);

        ExternalInterfaceResponse response = service.loadApiData();

        assertNotNull(response);
        assertNotNull(response.getRawBusinessResponse());
    }

    @Test
    void testGetLocationId() {
        JsonNode mockJsonNode = mock(JsonNode.class);
        when(mockJsonNode.get("columnName")).thenReturn(mock(JsonNode.class));
        when(mockJsonNode.get("columnName").asText()).thenReturn("location_id");
        when(mockJsonNode.get("columnValue")).thenReturn(mock(JsonNode.class));
        when(mockJsonNode.get("columnValue").asText()).thenReturn("Location123");

        String locationId = TnInventoryReportServiceImpl.getLocationId(mockJsonNode);

        assertEquals("Location123", locationId);
    }

    @Test
    void testCreateCsvWriter(@TempDir Path tempDir) throws Exception {
        String[] headers = {"header1", "header2"};
        CSVWriter writer = TnInventoryReportServiceImpl.createCsvWriter(tempDir.toString(), "Location123", headers);
        writer.close();

        Path filePath = tempDir.resolve("Location123_" + LocalDateTime.now().format(DateTimeFormatter.ofPattern("yyyy-MM-dd_HH-mm-ss")) + ".csv");
        assertTrue(Files.exists(filePath));
    }

    @Test
    void testProcessJson() throws Exception {
        JsonNode mockJsonNode = mock(JsonNode.class);
        ExternalInterfaceResponse mockResponse = new ExternalInterfaceResponse();
        mockResponse.setRawBusinessResponse(Arrays.asList("path/to/resourceDirectory", new String[] {"header"}));

        TnInventoryReportServiceImpl.processJson(mockJsonNode, "path/to/resourceDirectory", new TnInventoryReportRequest(), mockResponse);

        // Additional assertions to verify the processJson behavior
    }
}

============================================================================================
package com.verizon.connect.svcinv.business.dataservice.services;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.json.JSONArray;
import org.json.JSONObject;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Primary;
import org.springframework.core.ParameterizedTypeReference;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.opencsv.CSVWriter;
import com.verizon.connect.svcinv.business.dataservice.dto.ExternalInterfaceResponse;
import com.verizon.connect.svcinv.business.dataservice.dto.TnInventoryReportRequest;
import com.verizon.infrastructure.connect.genericdatabase.dto.GenericDataBaseInClauseParams;
import com.verizon.infrastructure.connect.genericdatabase.dto.GenericDataBaseRequestDTO;
import com.verizon.infrastructure.connect.genericdatabase.dto.GenericDataBaseResponseDTO;

@Service
@Primary
public class TnInventoryReportServiceImpl implements TnInventoryReportService{

	private static final Logger log = LoggerFactory.getLogger(TnInventoryReportServiceImpl.class);

	@Value("${spring.svcInvReadGenericUrl}")
	String svcInvReadUrl;

	@Value("${spring.configReadGenericDbUrl}")
	String configReadUrl;

	@Autowired
	private RestTemplate restTemplate;
	
	
	@Override
    public ExternalInterfaceResponse getTnInvReport(TnInventoryReportRequest request) {
        ExternalInterfaceResponse externalInterfaceResponse = new ExternalInterfaceResponse();
        List<GenericDataBaseRequestDTO> requestList = new ArrayList<>();

        ExternalInterfaceResponse response = loadApiData();
        JSONObject jsonVal = new JSONObject(response);
        JSONArray rawDataArray = jsonVal.getJSONArray("rawBusinessResponse");
        String pathforFileStorage = rawDataArray.getString(0);

        boolean hasEnterpriseID = isNonEmpty(request.getEnterpriseId());
        boolean hasLocationId = isNonEmpty(request.getLocationId()) && !request.getLocationId().contains("");

        if (hasEnterpriseID && hasLocationId || hasLocationId) {
            generateDatabaseRequest(requestList, request, "GET_TN_DETAILS_LOCATION_FOR_CSSOP", request.getLocationId());
        } else if (hasEnterpriseID) {
            generateDatabaseRequest(requestList, request, "GET_TN_DETAILS_FOR_CSSOP", Arrays.asList(request.getEnterpriseId()));
        } else {
            throw new IllegalArgumentException("Invalid request: EnterpriseID or LocationId must be provided");
        }

        HttpEntity<List<GenericDataBaseRequestDTO>> requestEntity = new HttpEntity<>(requestList, new HttpHeaders());
        ResponseEntity<List<GenericDataBaseResponseDTO>> genericDataBaseResponseDTORef = restTemplate.exchange(
                svcInvReadUrl, HttpMethod.POST, requestEntity,
                new ParameterizedTypeReference<List<GenericDataBaseResponseDTO>>() {
                });

        List<GenericDataBaseResponseDTO> responseBody = genericDataBaseResponseDTORef.getBody();
        if (responseBody != null && !responseBody.get(0).getDataList().isEmpty()) {
            externalInterfaceResponse.setRawBusinessResponse(responseBody);
        }
        

        processDatabaseResponse(responseBody, pathforFileStorage, request, response);       

        log.info("Exited SvcinvBusinessServiceImpl.getTnInvReport(ExternalInterfaceRequest request)");
        externalInterfaceResponse.setStatusCode("0");
        externalInterfaceResponse.setStatusDescription("Success");
        return externalInterfaceResponse;
    }
	

	public boolean isNonEmpty(String value) {
        return value != null && !value.isEmpty();
    }
    
	public boolean isNonEmpty(List<String> value) {
        return value != null && !value.isEmpty();
    }

    public void generateDatabaseRequest(List<GenericDataBaseRequestDTO> requestList, TnInventoryReportRequest request,
                                         String apiName, List<String> values) {
        GenericDataBaseRequestDTO genericDataBaseRequestDTO = new GenericDataBaseRequestDTO();
        genericDataBaseRequestDTO.setSqlKey(apiName);
        genericDataBaseRequestDTO.setSourceService(request.getSource());

        String[] columnValues = values.toArray(new String[0]);

        if (apiName.equals("GET_TN_DETAILS_FOR_CSSOP")) {
            genericDataBaseRequestDTO.setColumnValues(columnValues);
        } else {
            GenericDataBaseInClauseParams clauseParams = new GenericDataBaseInClauseParams();
            clauseParams.setInParams(columnValues);
            clauseParams.setKey("location_id");
            genericDataBaseRequestDTO.setInClauseList(Arrays.asList(clauseParams));
            genericDataBaseRequestDTO.setColumnValues(new String[1]);
        }

        requestList.add(genericDataBaseRequestDTO);
    }

    public void processDatabaseResponse(List<GenericDataBaseResponseDTO> responseBody, String resourceDirectory,
                                         TnInventoryReportRequest request, ExternalInterfaceResponse response) {
        try {
            ObjectMapper objectMapper = new ObjectMapper();
            String data = objectMapper.writeValueAsString(responseBody.get(0).getDataList());
            JsonNode jsonNode = objectMapper.readTree(data);
            processJson(jsonNode, resourceDirectory, request, response);
        } catch (IOException e) {
            log.error("Exception occurred due to", e);
        }
    }

    public static void processJson(JsonNode jsonNode, String resourceDirectory, TnInventoryReportRequest request,
                                   ExternalInterfaceResponse response) {
    	Map<String, CSVWriter> csvWriters = new HashMap<>();
    	try {
    		JSONObject jsonVal = new JSONObject(response);
    		 JSONArray rawDataArray = jsonVal.getJSONArray("rawBusinessResponse");
    		 JSONArray headerVal = rawDataArray.getJSONArray(1);
    		 String headerColumnValues = headerVal.getString(0);
    		 String[] headerValue = headerColumnValues.substring(1, headerColumnValues.length() - 1).split(",");
    		 
    		 for(JsonNode arrayElement:jsonNode) {
    			 String locationId = getLocationId(arrayElement);
    			 if(!csvWriters.containsKey(locationId)) {
    				 CSVWriter csvWriter = createCsvWriter(resourceDirectory, locationId, headerValue);
    				 csvWriters.put(locationId, csvWriter);
    			 }
    			 processArrayElement(arrayElement, csvWriters.get(locationId));
    		 }
    		 
    		 for(CSVWriter writer : csvWriters.values()) {
    			 writer.close();
    		 }
		} catch (IOException e) {
			log.error("Exception ocurred due to", e);
		}
    }
    
    public static String getLocationId(JsonNode arrayElement) {
    	for(JsonNode element : arrayElement) {
    		if("location_id".equals(element.get("columnName").asText())){
    			return element.get("columnValue").asText();
    		}
    	}
    	return null;
    }

    public static CSVWriter createCsvWriter(String resourceDirectory, String locationId, String[] headerValue) throws IOException {
        Path outputPath = getOutputPath(resourceDirectory, locationId);
        CSVWriter csvWriter = new CSVWriter(new FileWriter(outputPath.toFile(), true));
        boolean isNewFile = isFileEmpty(outputPath);
        if (isNewFile) {
            csvWriter.writeNext(headerValue);
        }
        return csvWriter;
    }

    public static Path getOutputPath(String resourceDirectory, String locationId) {
       // String custId = request.getEnterpriseId();
        LocalDateTime now = LocalDateTime.now();
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd_HH-mm-ss");
        String timestamp = now.format(formatter);
        String fileName = locationId + "_" + timestamp + ".csv";
        return Paths.get(resourceDirectory, fileName);
    }

    public static boolean isFileEmpty(Path path) throws IOException {
        try (BufferedReader reader = new BufferedReader(new FileReader(path.toFile()))) {
            return reader.readLine() == null;
        }
    }

    public static void processArrayElement(JsonNode arrayElement, CSVWriter csvWriter) {
        String[] row = new String[9];
        for (JsonNode element : arrayElement) {
            String columnName = element.get("columnName").asText();
            String columnValue = element.get("columnValue").asText();
            switch (columnName) {
                case "entity_name":
                    row[0] = columnValue;
                    break;
                case "location_id":
                    row[1] = columnValue;
                    break;
                case "location_type":
                    row[2] = columnValue;
                    break;
                case "tn":
                    row[3] = columnValue;
                    break;
                case "tn_status":
                    row[4] = columnValue;
                    break;
                case "calling_line_id_first_name":
                    row[5] = columnValue;
                    break;
                case "calling_line_id_last_name":
                    row[6] = columnValue;
                    break;
                case "type":
                    row[7] = columnValue;
                    break;
                case "resourcetype":
                    row[8] = columnValue;
                    break;
                default:
                    log.warn("Unexpected Column Name: " + columnName);
                    break;
            }
        }
        csvWriter.writeNext(row);
    }

    public ExternalInterfaceResponse loadApiData() {
        log.info("<<<<<<------ Entered ExternalInterfaceResponse loadApiData() ------>>>>>>");

        ExternalInterfaceResponse externalInterfaceResponse = new ExternalInterfaceResponse();
        GenericDataBaseRequestDTO genericDataBaseRequestDTO = new GenericDataBaseRequestDTO();
        List<GenericDataBaseRequestDTO> requestList = new ArrayList<>();

        genericDataBaseRequestDTO.setSqlKey("GET_CSSOP_API_CONFIG");
        genericDataBaseRequestDTO.setSourceService("CSSOP");

        genericDataBaseRequestDTO.setColumnValues(new Object[]{"GET_TN_DETAILS_FOR_CSSOP"});
        requestList.add(genericDataBaseRequestDTO);

        HttpEntity<List<GenericDataBaseRequestDTO>> requestEntity = new HttpEntity<>(requestList, new HttpHeaders());
        ResponseEntity<List<GenericDataBaseResponseDTO>> genericDbResponse = restTemplate.exchange(configReadUrl,
                HttpMethod.POST, requestEntity, new ParameterizedTypeReference<List<GenericDataBaseResponseDTO>>() {
                });

        if (genericDbResponse.getBody() != null && !genericDbResponse.getBody().get(0).getDataList().isEmpty()) {
            String value1 = genericDbResponse.getBody().get(0).getDataList().get(0).get(0).getColumnValue();
            JSONObject jsonVal = new JSONObject(value1);

            String resourceDirectory = jsonVal.getString("resourceDirectory");
            String[] headers = {jsonVal.getString("header")};
            externalInterfaceResponse.setRawBusinessResponse(Arrays.asList(resourceDirectory, headers));
        }

        log.info("<<<<<<------ Exited ExternalInterfaceResponse loadApiData() ------>>>>>>"
                + externalInterfaceResponse.getRawBusinessResponse());
        return externalInterfaceResponse;
    }
	
	
}
