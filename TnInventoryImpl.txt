===============================================
private static void processJsonArrayElements(JsonNode jsonNode, String resourceDirectory,
            String[] headerValue, Map<String, CSVWriter> csvWriters) throws IOException {
    for (JsonNode arrayElement : jsonNode) {
        String locationId = getLocationId(arrayElement);
        CSVWriter csvWriter = csvWriters.computeIfAbsent(locationId, id -> {
            try {
                return createCsvWriter(resourceDirectory, id, headerValue);
            } catch (IOException e) {
                log.error("Error creating CSVWriter for locationId: " + id, e);
                throw new RuntimeException(e);  // Propagate the exception to stop processing
            }
        });

        if (csvWriter != null) {
            processArrayElement(arrayElement, csvWriter);
        } else {
            log.warn("CSVWriter is null for locationId: " + locationId);
        }
    }
}

===================================================
 private static void processJsonArrayElements(JsonNode jsonNode, String resourceDirectory,
            String[] headerValue, Map<String, CSVWriter> csvWriters) throws IOException {
               for (JsonNode arrayElement : jsonNode) {
                 String locationId = getLocationId(arrayElement);
                 CSVWriter csvWriter = csvWriters.computeIfAbsent(locationId, id -> {
					try {
						return createCsvWriter(resourceDirectory, id, headerValue);
					} catch (IOException e) {
						e.printStackTrace();
					}
					return null;
				});
                   processArrayElement(arrayElement, csvWriter);
               }
             }
================================================
Updated Code
public static void processJson(JsonNode jsonNode, String resourceDirectory,
                                   ExternalInterfaceResponse response) {
    Map<String, CSVWriter> csvWriters = new HashMap<>();

    try {
        JSONObject jsonVal = new JSONObject(response);
        JSONArray rawDataArray = jsonVal.getJSONArray("rawBusinessResponse");
        JSONArray headerVal = rawDataArray.getJSONArray(1);
        String headerColumnValues = headerVal.getString(0);
        String[] headerValue = headerColumnValues.substring(1, headerColumnValues.length() - 1).split(",");

        processJsonArrayElements(jsonNode, resourceDirectory, headerValue, csvWriters);

    } catch (Exception e) {
        log.error(ERROR, e);
    } finally {
        closeCsvWriters(csvWriters);
    }
}

private static void processJsonArrayElements(JsonNode jsonNode, String resourceDirectory,
                                             String[] headerValue, Map<String, CSVWriter> csvWriters) throws IOException {
    for (JsonNode arrayElement : jsonNode) {
        String locationId = getLocationId(arrayElement);
        CSVWriter csvWriter = csvWriters.computeIfAbsent(locationId, id -> createCsvWriter(resourceDirectory, id, headerValue));
        processArrayElement(arrayElement, csvWriter);
    }
}

private static void closeCsvWriters(Map<String, CSVWriter> csvWriters) {
    for (CSVWriter writer : csvWriters.values()) {
        try {
            writer.close();
        } catch (IOException e) {
            log.error(ERROR, e);
        }
    }
}

===================================================
Sonar Issue
public static void processJson(JsonNode jsonNode, String resourceDirectory,
                                   ExternalInterfaceResponse response) {
    	Map<String, CSVWriter> csvWriters = new HashMap<>();
    	try {
    		JSONObject jsonVal = new JSONObject(response);
    		 JSONArray rawDataArray = jsonVal.getJSONArray("rawBusinessResponse");
    		 JSONArray headerVal = rawDataArray.getJSONArray(1);
    		 String headerColumnValues = headerVal.getString(0);
    		 String[] headerValue = headerColumnValues.substring(1, headerColumnValues.length() - 1).split(",");
    		 try {
    			 for(JsonNode arrayElement:jsonNode) {
        			 String locationId = getLocationId(arrayElement);
        			 if(!csvWriters.containsKey(locationId)) {
        				 CSVWriter csvWriter = createCsvWriter(resourceDirectory, locationId, headerValue);
        				 csvWriters.put(locationId, csvWriter);
        			 }
        			 processArrayElement(arrayElement, csvWriters.get(locationId));
        		 }
        		 
        		 for(CSVWriter writer : csvWriters.values()) {
        			 writer.close();
        		 }
			} catch (IOException e) {
				log.error(ERROR, e);
			}  		
		} catch (Exception e) {
			log.error(ERROR, e);
		}
    }
=============================================
Controller

@RestController
public class TnInventoryReportApiRestController implements TnInventoryReportApi{

	private static final Logger log = LoggerFactory.getLogger(TnInventoryReportApiRestController.class);
	
	@Autowired
	private TnInventoryReportService  tnInventoryReportService;
	
	@Override
	public ResponseEntity<ExternalInterfaceResponse> getTnInvReport(@ApiParam(value = "getTnInvReportApi", required = true) @Valid @RequestBody TnInventoryReportRequest externalInterfaceRequest)
			throws AppException, JsonProcessingException{
		
		log.info("Entered SvcinvWriteDatabaseApiRestController.getTnInvReport()");

		ExternalInterfaceResponse externalInterfaceResponse = tnInventoryReportService.getTnInvReport(externalInterfaceRequest);
		
		return new ResponseEntity<>(externalInterfaceResponse,HttpStatus.OK);
		
	}
}

============================================================================================
Junit Code coverage
package com.verizon.connect.svcinv.business.dataservice.services;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

import java.io.File;
import java.nio.file.Files;
import java.nio.file.Path;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Arrays;
import java.util.List;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.io.TempDir;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.ResponseEntity;
import org.springframework.web.client.RestTemplate;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.verizon.connect.svcinv.business.dataservice.dto.ExternalInterfaceResponse;
import com.verizon.connect.svcinv.business.dataservice.dto.TnInventoryReportRequest;
import com.verizon.infrastructure.connect.genericdatabase.dto.GenericDataBaseRequestDTO;
import com.verizon.infrastructure.connect.genericdatabase.dto.GenericDataBaseResponseDTO;

public class TnInventoryReportServiceImplTest {

    @Mock
    private RestTemplate restTemplate;

    @InjectMocks
    private TnInventoryReportServiceImpl service;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    void testGetTnInvReport_EnterpriseId() {
        TnInventoryReportRequest request = new TnInventoryReportRequest();
        request.setEnterpriseId("Enterprise123");
        
        // Mock the response
        ExternalInterfaceResponse mockResponse = new ExternalInterfaceResponse();
        mockResponse.setRawBusinessResponse(Arrays.asList("path/to/resourceDirectory", new String[] {"header"}));
        when(service.loadApiData()).thenReturn(mockResponse);

        // Mock the REST call
        ResponseEntity<List<GenericDataBaseResponseDTO>> mockDbResponse = mock(ResponseEntity.class);
        when(mockDbResponse.getBody()).thenReturn(Arrays.asList(createMockDatabaseResponse()));
        when(restTemplate.exchange(anyString(), any(HttpMethod.class), any(HttpEntity.class), any(ParameterizedTypeReference.class)))
                .thenReturn(mockDbResponse);

        ExternalInterfaceResponse response = service.getTnInvReport(request);

        assertNotNull(response);
        assertEquals("0", response.getStatusCode());
        assertEquals("Success", response.getStatusDescription());
        assertNotNull(response.getRawBusinessResponse());
    }

    @Test
    void testGetTnInvReport_LocationId() {
        TnInventoryReportRequest request = new TnInventoryReportRequest();
        request.setLocationId(Arrays.asList("Location123"));
        
        // Mock the response
        ExternalInterfaceResponse mockResponse = new ExternalInterfaceResponse();
        mockResponse.setRawBusinessResponse(Arrays.asList("path/to/resourceDirectory", new String[] {"header"}));
        when(service.loadApiData()).thenReturn(mockResponse);

        // Mock the REST call
        ResponseEntity<List<GenericDataBaseResponseDTO>> mockDbResponse = mock(ResponseEntity.class);
        when(mockDbResponse.getBody()).thenReturn(Arrays.asList(createMockDatabaseResponse()));
        when(restTemplate.exchange(anyString(), any(HttpMethod.class), any(HttpEntity.class), any(ParameterizedTypeReference.class)))
                .thenReturn(mockDbResponse);

        ExternalInterfaceResponse response = service.getTnInvReport(request);

        assertNotNull(response);
        assertEquals("0", response.getStatusCode());
        assertEquals("Success", response.getStatusDescription());
        assertNotNull(response.getRawBusinessResponse());
    }

    @Test
    void testIsNonEmpty_String() {
        assertTrue(service.isNonEmpty("Test"));
        assertFalse(service.isNonEmpty(""));
        assertFalse(service.isNonEmpty(null));
    }

    @Test
    void testIsNonEmpty_List() {
        assertTrue(service.isNonEmpty(Arrays.asList("Test")));
        assertFalse(service.isNonEmpty(Arrays.asList()));
        assertFalse(service.isNonEmpty(null));
    }

    @Test
    void testGenerateDatabaseRequest() {
        TnInventoryReportRequest request = new TnInventoryReportRequest();
        request.setSource("CSSOP");

        List<GenericDataBaseRequestDTO> requestList = new ArrayList<>();
        service.generateDatabaseRequest(requestList, request, "GET_TN_DETAILS_FOR_CSSOP", Arrays.asList("Enterprise123"));

        assertEquals(1, requestList.size());
        assertEquals("CSSOP", requestList.get(0).getSourceService());
        assertArrayEquals(new String[] {"Enterprise123"}, requestList.get(0).getColumnValues());
    }

    @Test
    void testProcessDatabaseResponse(@TempDir Path tempDir) throws Exception {
        TnInventoryReportRequest request = new TnInventoryReportRequest();
        ExternalInterfaceResponse response = new ExternalInterfaceResponse();
        response.setRawBusinessResponse(Arrays.asList(tempDir.toString(), new String[] {"header1,header2,header3"}));

        List<GenericDataBaseResponseDTO> responseBody = Arrays.asList(createMockDatabaseResponse());

        service.processDatabaseResponse(responseBody, tempDir.toString(), request, response);

        assertTrue(Files.exists(tempDir.resolve("Location123_" + LocalDateTime.now().format(DateTimeFormatter.ofPattern("yyyy-MM-dd_HH-mm-ss")) + ".csv")));
    }

    private GenericDataBaseResponseDTO createMockDatabaseResponse() {
        GenericDataBaseResponseDTO responseDTO = new GenericDataBaseResponseDTO();
        // Mock dataList as needed for your tests
        return responseDTO;
    }

    @Test
    void testLoadApiData() {
        // Mocking external data for loadApiData method
        ResponseEntity<List<GenericDataBaseResponseDTO>> mockDbResponse = mock(ResponseEntity.class);
        when(mockDbResponse.getBody()).thenReturn(Arrays.asList(createMockDatabaseResponse()));
        when(restTemplate.exchange(anyString(), any(HttpMethod.class), any(HttpEntity.class), any(ParameterizedTypeReference.class)))
                .thenReturn(mockDbResponse);

        ExternalInterfaceResponse response = service.loadApiData();

        assertNotNull(response);
        assertNotNull(response.getRawBusinessResponse());
    }

    @Test
    void testGetLocationId() {
        JsonNode mockJsonNode = mock(JsonNode.class);
        when(mockJsonNode.get("columnName")).thenReturn(mock(JsonNode.class));
        when(mockJsonNode.get("columnName").asText()).thenReturn("location_id");
        when(mockJsonNode.get("columnValue")).thenReturn(mock(JsonNode.class));
        when(mockJsonNode.get("columnValue").asText()).thenReturn("Location123");

        String locationId = TnInventoryReportServiceImpl.getLocationId(mockJsonNode);

        assertEquals("Location123", locationId);
    }

    @Test
    void testCreateCsvWriter(@TempDir Path tempDir) throws Exception {
        String[] headers = {"header1", "header2"};
        CSVWriter writer = TnInventoryReportServiceImpl.createCsvWriter(tempDir.toString(), "Location123", headers);
        writer.close();

        Path filePath = tempDir.resolve("Location123_" + LocalDateTime.now().format(DateTimeFormatter.ofPattern("yyyy-MM-dd_HH-mm-ss")) + ".csv");
        assertTrue(Files.exists(filePath));
    }

    @Test
    void testProcessJson() throws Exception {
        JsonNode mockJsonNode = mock(JsonNode.class);
        ExternalInterfaceResponse mockResponse = new ExternalInterfaceResponse();
        mockResponse.setRawBusinessResponse(Arrays.asList("path/to/resourceDirectory", new String[] {"header"}));

        TnInventoryReportServiceImpl.processJson(mockJsonNode, "path/to/resourceDirectory", new TnInventoryReportRequest(), mockResponse);

        // Additional assertions to verify the processJson behavior
    }
}

============================================================================================
package com.verizon.connect.svcinv.business.dataservice.services;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.json.JSONArray;
import org.json.JSONObject;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Primary;
import org.springframework.core.ParameterizedTypeReference;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.opencsv.CSVWriter;
import com.verizon.connect.svcinv.business.dataservice.dto.ExternalInterfaceResponse;
import com.verizon.connect.svcinv.business.dataservice.dto.TnInventoryReportRequest;
import com.verizon.infrastructure.connect.genericdatabase.dto.GenericDataBaseInClauseParams;
import com.verizon.infrastructure.connect.genericdatabase.dto.GenericDataBaseRequestDTO;
import com.verizon.infrastructure.connect.genericdatabase.dto.GenericDataBaseResponseDTO;

@Service
@Primary
public class TnInventoryReportServiceImpl implements TnInventoryReportService{

	private static final Logger log = LoggerFactory.getLogger(TnInventoryReportServiceImpl.class);

	@Value("${spring.svcInvReadGenericUrl}")
	String svcInvReadUrl;

	@Value("${spring.configReadGenericDbUrl}")
	String configReadUrl;

	@Autowired
	private RestTemplate restTemplate;
	
	
	@Override
    public ExternalInterfaceResponse getTnInvReport(TnInventoryReportRequest request) {
        ExternalInterfaceResponse externalInterfaceResponse = new ExternalInterfaceResponse();
        List<GenericDataBaseRequestDTO> requestList = new ArrayList<>();

        ExternalInterfaceResponse response = loadApiData();
        JSONObject jsonVal = new JSONObject(response);
        JSONArray rawDataArray = jsonVal.getJSONArray("rawBusinessResponse");
        String pathforFileStorage = rawDataArray.getString(0);

        boolean hasEnterpriseID = isNonEmpty(request.getEnterpriseId());
        boolean hasLocationId = isNonEmpty(request.getLocationId()) && !request.getLocationId().contains("");

        if (hasEnterpriseID && hasLocationId || hasLocationId) {
            generateDatabaseRequest(requestList, request, "GET_TN_DETAILS_LOCATION_FOR_CSSOP", request.getLocationId());
        } else if (hasEnterpriseID) {
            generateDatabaseRequest(requestList, request, "GET_TN_DETAILS_FOR_CSSOP", Arrays.asList(request.getEnterpriseId()));
        } else {
            throw new IllegalArgumentException("Invalid request: EnterpriseID or LocationId must be provided");
        }

        HttpEntity<List<GenericDataBaseRequestDTO>> requestEntity = new HttpEntity<>(requestList, new HttpHeaders());
        ResponseEntity<List<GenericDataBaseResponseDTO>> genericDataBaseResponseDTORef = restTemplate.exchange(
                svcInvReadUrl, HttpMethod.POST, requestEntity,
                new ParameterizedTypeReference<List<GenericDataBaseResponseDTO>>() {
                });

        List<GenericDataBaseResponseDTO> responseBody = genericDataBaseResponseDTORef.getBody();
        if (responseBody != null && !responseBody.get(0).getDataList().isEmpty()) {
            externalInterfaceResponse.setRawBusinessResponse(responseBody);
        }
        

        processDatabaseResponse(responseBody, pathforFileStorage, request, response);       

        log.info("Exited SvcinvBusinessServiceImpl.getTnInvReport(ExternalInterfaceRequest request)");
        externalInterfaceResponse.setStatusCode("0");
        externalInterfaceResponse.setStatusDescription("Success");
        return externalInterfaceResponse;
    }
	

	public boolean isNonEmpty(String value) {
        return value != null && !value.isEmpty();
    }
    
	public boolean isNonEmpty(List<String> value) {
        return value != null && !value.isEmpty();
    }

    public void generateDatabaseRequest(List<GenericDataBaseRequestDTO> requestList, TnInventoryReportRequest request,
                                         String apiName, List<String> values) {
        GenericDataBaseRequestDTO genericDataBaseRequestDTO = new GenericDataBaseRequestDTO();
        genericDataBaseRequestDTO.setSqlKey(apiName);
        genericDataBaseRequestDTO.setSourceService(request.getSource());

        String[] columnValues = values.toArray(new String[0]);

        if (apiName.equals("GET_TN_DETAILS_FOR_CSSOP")) {
            genericDataBaseRequestDTO.setColumnValues(columnValues);
        } else {
            GenericDataBaseInClauseParams clauseParams = new GenericDataBaseInClauseParams();
            clauseParams.setInParams(columnValues);
            clauseParams.setKey("location_id");
            genericDataBaseRequestDTO.setInClauseList(Arrays.asList(clauseParams));
            genericDataBaseRequestDTO.setColumnValues(new String[1]);
        }

        requestList.add(genericDataBaseRequestDTO);
    }

    public void processDatabaseResponse(List<GenericDataBaseResponseDTO> responseBody, String resourceDirectory,
                                         TnInventoryReportRequest request, ExternalInterfaceResponse response) {
        try {
            ObjectMapper objectMapper = new ObjectMapper();
            String data = objectMapper.writeValueAsString(responseBody.get(0).getDataList());
            JsonNode jsonNode = objectMapper.readTree(data);
            processJson(jsonNode, resourceDirectory, request, response);
        } catch (IOException e) {
            log.error("Exception occurred due to", e);
        }
    }

    public static void processJson(JsonNode jsonNode, String resourceDirectory, TnInventoryReportRequest request,
                                   ExternalInterfaceResponse response) {
    	Map<String, CSVWriter> csvWriters = new HashMap<>();
    	try {
    		JSONObject jsonVal = new JSONObject(response);
    		 JSONArray rawDataArray = jsonVal.getJSONArray("rawBusinessResponse");
    		 JSONArray headerVal = rawDataArray.getJSONArray(1);
    		 String headerColumnValues = headerVal.getString(0);
    		 String[] headerValue = headerColumnValues.substring(1, headerColumnValues.length() - 1).split(",");
    		 
    		 for(JsonNode arrayElement:jsonNode) {
    			 String locationId = getLocationId(arrayElement);
    			 if(!csvWriters.containsKey(locationId)) {
    				 CSVWriter csvWriter = createCsvWriter(resourceDirectory, locationId, headerValue);
    				 csvWriters.put(locationId, csvWriter);
    			 }
    			 processArrayElement(arrayElement, csvWriters.get(locationId));
    		 }
    		 
    		 for(CSVWriter writer : csvWriters.values()) {
    			 writer.close();
    		 }
		} catch (IOException e) {
			log.error("Exception ocurred due to", e);
		}
    }
    
    public static String getLocationId(JsonNode arrayElement) {
    	for(JsonNode element : arrayElement) {
    		if("location_id".equals(element.get("columnName").asText())){
    			return element.get("columnValue").asText();
    		}
    	}
    	return null;
    }

    public static CSVWriter createCsvWriter(String resourceDirectory, String locationId, String[] headerValue) throws IOException {
        Path outputPath = getOutputPath(resourceDirectory, locationId);
        CSVWriter csvWriter = new CSVWriter(new FileWriter(outputPath.toFile(), true));
        boolean isNewFile = isFileEmpty(outputPath);
        if (isNewFile) {
            csvWriter.writeNext(headerValue);
        }
        return csvWriter;
    }

    public static Path getOutputPath(String resourceDirectory, String locationId) {
       // String custId = request.getEnterpriseId();
        LocalDateTime now = LocalDateTime.now();
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd_HH-mm-ss");
        String timestamp = now.format(formatter);
        String fileName = locationId + "_" + timestamp + ".csv";
        return Paths.get(resourceDirectory, fileName);
    }

    public static boolean isFileEmpty(Path path) throws IOException {
        try (BufferedReader reader = new BufferedReader(new FileReader(path.toFile()))) {
            return reader.readLine() == null;
        }
    }

    public static void processArrayElement(JsonNode arrayElement, CSVWriter csvWriter) {
        String[] row = new String[9];
        for (JsonNode element : arrayElement) {
            String columnName = element.get("columnName").asText();
            String columnValue = element.get("columnValue").asText();
            switch (columnName) {
                case "entity_name":
                    row[0] = columnValue;
                    break;
                case "location_id":
                    row[1] = columnValue;
                    break;
                case "location_type":
                    row[2] = columnValue;
                    break;
                case "tn":
                    row[3] = columnValue;
                    break;
                case "tn_status":
                    row[4] = columnValue;
                    break;
                case "calling_line_id_first_name":
                    row[5] = columnValue;
                    break;
                case "calling_line_id_last_name":
                    row[6] = columnValue;
                    break;
                case "type":
                    row[7] = columnValue;
                    break;
                case "resourcetype":
                    row[8] = columnValue;
                    break;
                default:
                    log.warn("Unexpected Column Name: " + columnName);
                    break;
            }
        }
        csvWriter.writeNext(row);
    }

    public ExternalInterfaceResponse loadApiData() {
        log.info("<<<<<<------ Entered ExternalInterfaceResponse loadApiData() ------>>>>>>");

        ExternalInterfaceResponse externalInterfaceResponse = new ExternalInterfaceResponse();
        GenericDataBaseRequestDTO genericDataBaseRequestDTO = new GenericDataBaseRequestDTO();
        List<GenericDataBaseRequestDTO> requestList = new ArrayList<>();

        genericDataBaseRequestDTO.setSqlKey("GET_CSSOP_API_CONFIG");
        genericDataBaseRequestDTO.setSourceService("CSSOP");

        genericDataBaseRequestDTO.setColumnValues(new Object[]{"GET_TN_DETAILS_FOR_CSSOP"});
        requestList.add(genericDataBaseRequestDTO);

        HttpEntity<List<GenericDataBaseRequestDTO>> requestEntity = new HttpEntity<>(requestList, new HttpHeaders());
        ResponseEntity<List<GenericDataBaseResponseDTO>> genericDbResponse = restTemplate.exchange(configReadUrl,
                HttpMethod.POST, requestEntity, new ParameterizedTypeReference<List<GenericDataBaseResponseDTO>>() {
                });

        if (genericDbResponse.getBody() != null && !genericDbResponse.getBody().get(0).getDataList().isEmpty()) {
            String value1 = genericDbResponse.getBody().get(0).getDataList().get(0).get(0).getColumnValue();
            JSONObject jsonVal = new JSONObject(value1);

            String resourceDirectory = jsonVal.getString("resourceDirectory");
            String[] headers = {jsonVal.getString("header")};
            externalInterfaceResponse.setRawBusinessResponse(Arrays.asList(resourceDirectory, headers));
        }

        log.info("<<<<<<------ Exited ExternalInterfaceResponse loadApiData() ------>>>>>>"
                + externalInterfaceResponse.getRawBusinessResponse());
        return externalInterfaceResponse;
    }
	
	
}
